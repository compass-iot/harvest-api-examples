// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buf/validate/validate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Buf.Validate {

  /// <summary>Holder for reflection information generated from buf/validate/validate.proto</summary>
  public static partial class ValidateReflection {

    #region Descriptor
    /// <summary>File descriptor for buf/validate/validate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ValidateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtidWYvdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8SDGJ1Zi52YWxpZGF0ZRod",
            "YnVmL3ZhbGlkYXRlL2V4cHJlc3Npb24ucHJvdG8aH2J1Zi92YWxpZGF0ZS9w",
            "cml2L3ByaXZhdGUucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9y",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb2ds",
            "ZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ibgoSTWVzc2FnZUNvbnN0cmFp",
            "bnRzEh8KCGRpc2FibGVkGAEgASgISABSCGRpc2FibGVkiAEBEioKA2NlbBgD",
            "IAMoCzIYLmJ1Zi52YWxpZGF0ZS5Db25zdHJhaW50UgNjZWxCCwoJX2Rpc2Fi",
            "bGVkIkAKEE9uZW9mQ29uc3RyYWludHMSHwoIcmVxdWlyZWQYASABKAhIAFII",
            "cmVxdWlyZWSIAQFCCwoJX3JlcXVpcmVkIqsKChBGaWVsZENvbnN0cmFpbnRz",
            "EioKA2NlbBgXIAMoCzIYLmJ1Zi52YWxpZGF0ZS5Db25zdHJhaW50UgNjZWwS",
            "GgoIcmVxdWlyZWQYGSABKAhSCHJlcXVpcmVkEiwKBmlnbm9yZRgbIAEoDjIU",
            "LmJ1Zi52YWxpZGF0ZS5JZ25vcmVSBmlnbm9yZRIwCgVmbG9hdBgBIAEoCzIY",
            "LmJ1Zi52YWxpZGF0ZS5GbG9hdFJ1bGVzSABSBWZsb2F0EjMKBmRvdWJsZRgC",
            "IAEoCzIZLmJ1Zi52YWxpZGF0ZS5Eb3VibGVSdWxlc0gAUgZkb3VibGUSMAoF",
            "aW50MzIYAyABKAsyGC5idWYudmFsaWRhdGUuSW50MzJSdWxlc0gAUgVpbnQz",
            "MhIwCgVpbnQ2NBgEIAEoCzIYLmJ1Zi52YWxpZGF0ZS5JbnQ2NFJ1bGVzSABS",
            "BWludDY0EjMKBnVpbnQzMhgFIAEoCzIZLmJ1Zi52YWxpZGF0ZS5VSW50MzJS",
            "dWxlc0gAUgZ1aW50MzISMwoGdWludDY0GAYgASgLMhkuYnVmLnZhbGlkYXRl",
            "LlVJbnQ2NFJ1bGVzSABSBnVpbnQ2NBIzCgZzaW50MzIYByABKAsyGS5idWYu",
            "dmFsaWRhdGUuU0ludDMyUnVsZXNIAFIGc2ludDMyEjMKBnNpbnQ2NBgIIAEo",
            "CzIZLmJ1Zi52YWxpZGF0ZS5TSW50NjRSdWxlc0gAUgZzaW50NjQSNgoHZml4",
            "ZWQzMhgJIAEoCzIaLmJ1Zi52YWxpZGF0ZS5GaXhlZDMyUnVsZXNIAFIHZml4",
            "ZWQzMhI2CgdmaXhlZDY0GAogASgLMhouYnVmLnZhbGlkYXRlLkZpeGVkNjRS",
            "dWxlc0gAUgdmaXhlZDY0EjkKCHNmaXhlZDMyGAsgASgLMhsuYnVmLnZhbGlk",
            "YXRlLlNGaXhlZDMyUnVsZXNIAFIIc2ZpeGVkMzISOQoIc2ZpeGVkNjQYDCAB",
            "KAsyGy5idWYudmFsaWRhdGUuU0ZpeGVkNjRSdWxlc0gAUghzZml4ZWQ2NBIt",
            "CgRib29sGA0gASgLMhcuYnVmLnZhbGlkYXRlLkJvb2xSdWxlc0gAUgRib29s",
            "EjMKBnN0cmluZxgOIAEoCzIZLmJ1Zi52YWxpZGF0ZS5TdHJpbmdSdWxlc0gA",
            "UgZzdHJpbmcSMAoFYnl0ZXMYDyABKAsyGC5idWYudmFsaWRhdGUuQnl0ZXNS",
            "dWxlc0gAUgVieXRlcxItCgRlbnVtGBAgASgLMhcuYnVmLnZhbGlkYXRlLkVu",
            "dW1SdWxlc0gAUgRlbnVtEjkKCHJlcGVhdGVkGBIgASgLMhsuYnVmLnZhbGlk",
            "YXRlLlJlcGVhdGVkUnVsZXNIAFIIcmVwZWF0ZWQSKgoDbWFwGBMgASgLMhYu",
            "YnVmLnZhbGlkYXRlLk1hcFJ1bGVzSABSA21hcBIqCgNhbnkYFCABKAsyFi5i",
            "dWYudmFsaWRhdGUuQW55UnVsZXNIAFIDYW55EjkKCGR1cmF0aW9uGBUgASgL",
            "MhsuYnVmLnZhbGlkYXRlLkR1cmF0aW9uUnVsZXNIAFIIZHVyYXRpb24SPAoJ",
            "dGltZXN0YW1wGBYgASgLMhwuYnVmLnZhbGlkYXRlLlRpbWVzdGFtcFJ1bGVz",
            "SABSCXRpbWVzdGFtcBIcCgdza2lwcGVkGBggASgIQgIYAVIHc2tpcHBlZBIl",
            "CgxpZ25vcmVfZW1wdHkYGiABKAhCAhgBUgtpZ25vcmVFbXB0eUIGCgR0eXBl",
            "IqIXCgpGbG9hdFJ1bGVzEnUKBWNvbnN0GAEgASgCQlrCSFcKVQoLZmxvYXQu",
            "Y29uc3QaRnRoaXMgIT0gcnVsZXMuY29uc3QgPyAndmFsdWUgbXVzdCBlcXVh",
            "bCAlcycuZm9ybWF0KFtydWxlcy5jb25zdF0pIDogJydIAlIFY29uc3SIAQES",
            "owEKAmx0GAIgASgCQpABwkiMAQqJAQoIZmxvYXQubHQafSFoYXMocnVsZXMu",
            "Z3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiAodGhpcy5pc05hbigpIHx8IHRo",
            "aXMgPj0gcnVsZXMubHQpPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMubHRdKSA6ICcnSABSAmx0ErQBCgNsdGUYAyABKAJC",
            "nwHCSJsBCpgBCglmbG9hdC5sdGUaigEhaGFzKHJ1bGVzLmd0ZSkgJiYgIWhh",
            "cyhydWxlcy5ndCkgJiYgKHRoaXMuaXNOYW4oKSB8fCB0aGlzID4gcnVsZXMu",
            "bHRlKT8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmx0ZV0pIDogJydIAFIDbHRlEvMHCgJndBgEIAEo",
            "AkLgB8JI3AcKjQEKCGZsb2F0Lmd0GoABIWhhcyhydWxlcy5sdCkgJiYgIWhh",
            "cyhydWxlcy5sdGUpICYmICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA8PSBydWxl",
            "cy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5ndF0pIDogJycKwwEKC2Zsb2F0Lmd0X2x0GrMBaGFzKHJ1bGVz",
            "Lmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAodGhpcy5pc05hbigp",
            "IHx8IHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKzQEKFWZsb2F0",
            "Lmd0X2x0X2V4Y2x1c2l2ZRqzAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQg",
            "PCBydWxlcy5ndCAmJiAodGhpcy5pc05hbigpIHx8IChydWxlcy5sdCA8PSB0",
            "aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpKT8gJ3ZhbHVlIG11c3QgYmUgZ3Jl",
            "YXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5n",
            "dCwgcnVsZXMubHRdKSA6ICcnCtMBCgxmbG9hdC5ndF9sdGUawgFoYXMocnVs",
            "ZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3QgJiYgKHRoaXMuaXNO",
            "YW4oKSB8fCB0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3Qp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRl",
            "XSkgOiAnJwrdAQoWZmxvYXQuZ3RfbHRlX2V4Y2x1c2l2ZRrCAWhhcyhydWxl",
            "cy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ICYmICh0aGlzLmlzTmFu",
            "KCkgfHwgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCkp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVd",
            "KSA6ICcnSAFSAmd0Er8ICgNndGUYBSABKAJCqgjCSKYICpsBCglmbG9hdC5n",
            "dGUajQEhaGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgKHRo",
            "aXMuaXNOYW4oKSB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3Qg",
            "YmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZV0pIDogJycK0gEKDGZsb2F0Lmd0ZV9sdBrBAWhhcyhydWxlcy5sdCkg",
            "JiYgcnVsZXMubHQgPj0gcnVsZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwg",
            "dGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVl",
            "IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK",
            "3AEKFmZsb2F0Lmd0ZV9sdF9leGNsdXNpdmUawQFoYXMocnVsZXMubHQpICYm",
            "IHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwgKHJ1",
            "bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSkpPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCuIB",
            "Cg1mbG9hdC5ndGVfbHRlGtABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRl",
            "ID49IHJ1bGVzLmd0ZSAmJiAodGhpcy5pc05hbigpIHx8IHRoaXMgPiBydWxl",
            "cy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVx",
            "dWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAn",
            "JwrsAQoXZmxvYXQuZ3RlX2x0ZV9leGNsdXNpdmUa0AFoYXMocnVsZXMubHRl",
            "KSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndGUgJiYgKHRoaXMuaXNOYW4oKSB8",
            "fCAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKSk/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBs",
            "ZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBy",
            "dWxlcy5sdGVdKSA6ICcnSAFSA2d0ZRJ5CgJpbhgGIAMoAkJpwkhmCmQKCGZs",
            "b2F0LmluGlghKHRoaXMgaW4gZHluKHJ1bGVzKVsnaW4nXSkgPyAndmFsdWUg",
            "bXVzdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2R5bihydWxlcylbJ2luJ11d",
            "KSA6ICcnUgJpbhJ9CgZub3RfaW4YByADKAJCZsJIYwphCgxmbG9hdC5ub3Rf",
            "aW4aUXRoaXMgaW4gcnVsZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJl",
            "IGluIGxpc3QgJXMnLmZvcm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90",
            "SW4SZwoGZmluaXRlGAggASgIQk/CSEwKSgoMZmxvYXQuZmluaXRlGjp0aGlz",
            "LmlzTmFuKCkgfHwgdGhpcy5pc0luZigpID8gJ3ZhbHVlIG11c3QgYmUgZmlu",
            "aXRlJyA6ICcnUgZmaW5pdGVCCwoJbGVzc190aGFuQg4KDGdyZWF0ZXJfdGhh",
            "bkIICgZfY29uc3QisxcKC0RvdWJsZVJ1bGVzEnYKBWNvbnN0GAEgASgBQlvC",
            "SFgKVgoMZG91YmxlLmNvbnN0GkZ0aGlzICE9IHJ1bGVzLmNvbnN0ID8gJ3Zh",
            "bHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbcnVsZXMuY29uc3RdKSA6ICcn",
            "SAJSBWNvbnN0iAEBEqQBCgJsdBgCIAEoAUKRAcJIjQEKigEKCWRvdWJsZS5s",
            "dBp9IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmICh0aGlz",
            "LmlzTmFuKCkgfHwgdGhpcyA+PSBydWxlcy5sdCk/ICd2YWx1ZSBtdXN0IGJl",
            "IGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5sdF0pIDogJydIAFICbHQS",
            "tQEKA2x0ZRgDIAEoAUKgAcJInAEKmQEKCmRvdWJsZS5sdGUaigEhaGFzKHJ1",
            "bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgKHRoaXMuaXNOYW4oKSB8",
            "fCB0aGlzID4gcnVsZXMubHRlKT8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmx0ZV0pIDogJydIAFID",
            "bHRlEvgHCgJndBgEIAEoAULlB8JI4QcKjgEKCWRvdWJsZS5ndBqAASFoYXMo",
            "cnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiAodGhpcy5pc05hbigp",
            "IHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RdKSA6ICcnCsQBCgxkb3VibGUu",
            "Z3RfbHQaswFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0",
            "ICYmICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA+PSBydWxlcy5sdCB8fCB0aGlz",
            "IDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVz",
            "IGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0",
            "XSkgOiAnJwrOAQoWZG91YmxlLmd0X2x0X2V4Y2x1c2l2ZRqzAWhhcyhydWxl",
            "cy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndCAmJiAodGhpcy5pc05hbigp",
            "IHx8IChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpKT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiAl",
            "cycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRdKSA6ICcnCtQBCg1kb3Vi",
            "bGUuZ3RfbHRlGsIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1",
            "bGVzLmd0ICYmICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA+IHJ1bGVzLmx0ZSB8",
            "fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycK3gEKF2RvdWJsZS5ndF9sdGVf",
            "ZXhjbHVzaXZlGsIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3QgJiYgKHRoaXMuaXNOYW4oKSB8fCAocnVsZXMubHRlIDwgdGhpcyAm",
            "JiB0aGlzIDw9IHJ1bGVzLmd0KSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJydIAVICZ3QSxAgKA2d0ZRgFIAEo",
            "AUKvCMJIqwgKnAEKCmRvdWJsZS5ndGUajQEhaGFzKHJ1bGVzLmx0KSAmJiAh",
            "aGFzKHJ1bGVzLmx0ZSkgJiYgKHRoaXMuaXNOYW4oKSB8fCB0aGlzIDwgcnVs",
            "ZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFs",
            "IHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycK0wEKDWRvdWJsZS5n",
            "dGVfbHQawQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0",
            "ZSAmJiAodGhpcy5pc05hbigpIHx8IHRoaXMgPj0gcnVsZXMubHQgfHwgdGhp",
            "cyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBv",
            "ciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZSwgcnVsZXMubHRdKSA6ICcnCt0BChdkb3VibGUuZ3RlX2x0X2V4Y2x1",
            "c2l2ZRrBAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUg",
            "JiYgKHRoaXMuaXNOYW4oKSB8fCAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlz",
            "IDwgcnVsZXMuZ3RlKSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBv",
            "ciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RlLCBydWxlcy5sdF0pIDogJycK4wEKDmRvdWJsZS5ndGVfbHRlGtABaGFz",
            "KHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ZSAmJiAodGhp",
            "cy5pc05hbigpIHx8IHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVz",
            "Lmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0",
            "byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrtAQoYZG91YmxlLmd0ZV9sdGVf",
            "ZXhjbHVzaXZlGtABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwgKHJ1bGVzLmx0ZSA8IHRoaXMg",
            "JiYgdGhpcyA8IHJ1bGVzLmd0ZSkpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRv",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNn",
            "dGUSegoCaW4YBiADKAFCasJIZwplCglkb3VibGUuaW4aWCEodGhpcyBpbiBk",
            "eW4ocnVsZXMpWydpbiddKSA/ICd2YWx1ZSBtdXN0IGJlIGluIGxpc3QgJXMn",
            "LmZvcm1hdChbZHluKHJ1bGVzKVsnaW4nXV0pIDogJydSAmluEn4KBm5vdF9p",
            "bhgHIAMoAUJnwkhkCmIKDWRvdWJsZS5ub3RfaW4aUXRoaXMgaW4gcnVsZXMu",
            "bm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJlIGluIGxpc3QgJXMnLmZvcm1h",
            "dChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90SW4SaAoGZmluaXRlGAggASgI",
            "QlDCSE0KSwoNZG91YmxlLmZpbml0ZRo6dGhpcy5pc05hbigpIHx8IHRoaXMu",
            "aXNJbmYoKSA/ICd2YWx1ZSBtdXN0IGJlIGZpbml0ZScgOiAnJ1IGZmluaXRl",
            "QgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW5CCAoGX2NvbnN0IuIUCgpJ",
            "bnQzMlJ1bGVzEnUKBWNvbnN0GAEgASgFQlrCSFcKVQoLaW50MzIuY29uc3Qa",
            "RnRoaXMgIT0gcnVsZXMuY29uc3QgPyAndmFsdWUgbXVzdCBlcXVhbCAlcycu",
            "Zm9ybWF0KFtydWxlcy5jb25zdF0pIDogJydIAlIFY29uc3SIAQESjgEKAmx0",
            "GAIgASgFQnzCSHkKdwoIaW50MzIubHQaayFoYXMocnVsZXMuZ3RlKSAmJiAh",
            "aGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1bGVzLmx0PyAndmFsdWUgbXVz",
            "dCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMubHRdKSA6ICcnSABS",
            "Amx0EqEBCgNsdGUYAyABKAVCjAHCSIgBCoUBCglpbnQzMi5sdGUaeCFoYXMo",
            "cnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID4gcnVsZXMu",
            "bHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMn",
            "LmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gAUgNsdGUSmwcKAmd0GAQgASgF",
            "QogHwkiEBwp6CghpbnQzMi5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhy",
            "dWxlcy5sdGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKswEK",
            "C2ludDMyLmd0X2x0GqMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBy",
            "dWxlcy5ndCAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVz",
            "Lmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq7",
            "AQoVaW50MzIuZ3RfbHRfZXhjbHVzaXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBy",
            "dWxlcy5sdCA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRo",
            "aXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4g",
            "JXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5s",
            "dF0pIDogJycKwwEKDGludDMyLmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYm",
            "IHJ1bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8",
            "fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKywEKFmludDMyLmd0X2x0ZV9l",
            "eGNsdXNpdmUasAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxl",
            "cy5ndCAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0",
            "KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRl",
            "XSkgOiAnJ0gBUgJndBLoBwoDZ3RlGAUgASgFQtMHwkjPBwqIAQoJaW50MzIu",
            "Z3RlGnshaGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhp",
            "cyA8IHJ1bGVzLmd0ZT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9y",
            "IGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKwgEKDGlu",
            "dDMyLmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVz",
            "Lmx0XSkgOiAnJwrKAQoWaW50MzIuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhy",
            "dWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0",
            "IDw9IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK0gEKDWludDMy",
            "Lmd0ZV9sdGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxl",
            "cy5ndGUsIHJ1bGVzLmx0ZV0pIDogJycK2gEKF2ludDMyLmd0ZV9sdGVfZXhj",
            "bHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMu",
            "Z3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMg",
            "b3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0",
            "ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUSeQoCaW4YBiADKAVCacJIZgpk",
            "CghpbnQzMi5pbhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10pID8gJ3Zh",
            "bHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVsZXMpWydp",
            "biddXSkgOiAnJ1ICaW4SfQoGbm90X2luGAcgAygFQmbCSGMKYQoMaW50MzIu",
            "bm90X2luGlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5v",
            "dCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydS",
            "BW5vdEluQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW5CCAoGX2NvbnN0",
            "IuIUCgpJbnQ2NFJ1bGVzEnUKBWNvbnN0GAEgASgDQlrCSFcKVQoLaW50NjQu",
            "Y29uc3QaRnRoaXMgIT0gcnVsZXMuY29uc3QgPyAndmFsdWUgbXVzdCBlcXVh",
            "bCAlcycuZm9ybWF0KFtydWxlcy5jb25zdF0pIDogJydIAlIFY29uc3SIAQES",
            "jgEKAmx0GAIgASgDQnzCSHkKdwoIaW50NjQubHQaayFoYXMocnVsZXMuZ3Rl",
            "KSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1bGVzLmx0PyAndmFs",
            "dWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMubHRdKSA6",
            "ICcnSABSAmx0EqEBCgNsdGUYAyABKANCjAHCSIgBCoUBCglpbnQ2NC5sdGUa",
            "eCFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID4g",
            "cnVsZXMubHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gAUgNsdGUSmwcKAmd0",
            "GAQgASgDQogHwkiEBwp6CghpbnQ2NC5ndBpuIWhhcyhydWxlcy5sdCkgJiYg",
            "IWhhcyhydWxlcy5sdGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDog",
            "JycKswEKC2ludDY0Lmd0X2x0GqMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5s",
            "dCA+PSBydWxlcy5ndCAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9",
            "IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFu",
            "ZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkg",
            "OiAnJwq7AQoVaW50NjQuZ3RfbHRfZXhjbHVzaXZlGqEBaGFzKHJ1bGVzLmx0",
            "KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdCA8PSB0aGlz",
            "ICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gJXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBy",
            "dWxlcy5sdF0pIDogJycKwwEKDGludDY0Lmd0X2x0ZRqyAWhhcyhydWxlcy5s",
            "dGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVz",
            "Lmx0ZSB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3Jl",
            "YXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZv",
            "cm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKywEKFmludDY0Lmd0",
            "X2x0ZV9leGNsdXNpdmUasAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "PCBydWxlcy5ndCAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1",
            "bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxl",
            "c3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVs",
            "ZXMubHRlXSkgOiAnJ0gBUgJndBLoBwoDZ3RlGAUgASgDQtMHwkjPBwqIAQoJ",
            "aW50NjQuZ3RlGnshaGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgdGhpcyA8IHJ1bGVzLmd0ZT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycK",
            "wgEKDGludDY0Lmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQg",
            "Pj0gcnVsZXMuZ3RlICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBy",
            "dWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUs",
            "IHJ1bGVzLmx0XSkgOiAnJwrKAQoWaW50NjQuZ3RlX2x0X2V4Y2x1c2l2ZRqv",
            "AWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1",
            "bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRo",
            "YW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK0gEK",
            "DWludDY0Lmd0ZV9sdGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "Pj0gcnVsZXMuZ3RlICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBy",
            "dWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0",
            "KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJycK2gEKF2ludDY0Lmd0ZV9s",
            "dGVfZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwg",
            "cnVsZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxl",
            "cy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUSeQoCaW4YBiADKANC",
            "acJIZgpkCghpbnQ2NC5pbhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10p",
            "ID8gJ3ZhbHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVs",
            "ZXMpWydpbiddXSkgOiAnJ1ICaW4SfQoGbm90X2luGAcgAygDQmbCSGMKYQoM",
            "aW50NjQubm90X2luGlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBt",
            "dXN0IG5vdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0p",
            "IDogJydSBW5vdEluQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW5CCAoG",
            "X2NvbnN0IvIUCgtVSW50MzJSdWxlcxJ2CgVjb25zdBgBIAEoDUJbwkhYClYK",
            "DHVpbnQzMi5jb25zdBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBt",
            "dXN0IGVxdWFsICVzJy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gCUgVj",
            "b25zdIgBARKPAQoCbHQYAiABKA1CfcJIegp4Cgl1aW50MzIubHQaayFoYXMo",
            "cnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1bGVz",
            "Lmx0PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMubHRdKSA6ICcnSABSAmx0EqIBCgNsdGUYAyABKA1CjQHCSIkBCoYBCgp1",
            "aW50MzIubHRlGnghaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkg",
            "JiYgdGhpcyA+IHJ1bGVzLmx0ZT8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmx0ZV0pIDogJydIAFID",
            "bHRlEqAHCgJndBgEIAEoDUKNB8JIiQcKewoJdWludDMyLmd0Gm4haGFzKHJ1",
            "bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8PSBydWxlcy5n",
            "dD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0XSkgOiAnJwq0AQoMdWludDMyLmd0X2x0GqMBaGFzKHJ1bGVzLmx0",
            "KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAodGhpcyA+PSBydWxlcy5s",
            "dCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3Qs",
            "IHJ1bGVzLmx0XSkgOiAnJwq8AQoWdWludDMyLmd0X2x0X2V4Y2x1c2l2ZRqh",
            "AWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndCAmJiAocnVs",
            "ZXMubHQgPD0gdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5ndCwgcnVsZXMubHRdKSA6ICcnCsQBCg11aW50MzIuZ3RfbHRl",
            "GrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ICYm",
            "ICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAn",
            "JwrMAQoXdWludDMyLmd0X2x0ZV9leGNsdXNpdmUasAFoYXMocnVsZXMubHRl",
            "KSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndCAmJiAocnVsZXMubHRlIDwgdGhp",
            "cyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0",
            "KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJ0gBUgJndBLtBwoDZ3RlGAUg",
            "ASgNQtgHwkjUBwqJAQoKdWludDMyLmd0ZRp7IWhhcyhydWxlcy5sdCkgJiYg",
            "IWhhcyhydWxlcy5sdGUpICYmIHRoaXMgPCBydWxlcy5ndGU/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFty",
            "dWxlcy5ndGVdKSA6ICcnCsMBCg11aW50MzIuZ3RlX2x0GrEBaGFzKHJ1bGVz",
            "Lmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPj0gcnVs",
            "ZXMubHQgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCssBChd1aW50MzIu",
            "Z3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQg",
            "PCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8IHJ1",
            "bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVh",
            "bCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBy",
            "dWxlcy5sdF0pIDogJycK0wEKDnVpbnQzMi5ndGVfbHRlGsABaGFzKHJ1bGVz",
            "Lmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+IHJ1",
            "bGVzLmx0ZSB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUg",
            "Z3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6",
            "ICcnCtsBChh1aW50MzIuZ3RlX2x0ZV9leGNsdXNpdmUavgFoYXMocnVsZXMu",
            "bHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0ZSA8",
            "IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcn",
            "SAFSA2d0ZRJ6CgJpbhgGIAMoDUJqwkhnCmUKCXVpbnQzMi5pbhpYISh0aGlz",
            "IGluIGR5bihydWxlcylbJ2luJ10pID8gJ3ZhbHVlIG11c3QgYmUgaW4gbGlz",
            "dCAlcycuZm9ybWF0KFtkeW4ocnVsZXMpWydpbiddXSkgOiAnJ1ICaW4SfgoG",
            "bm90X2luGAcgAygNQmfCSGQKYgoNdWludDMyLm5vdF9pbhpRdGhpcyBpbiBy",
            "dWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycu",
            "Zm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbkILCglsZXNzX3Ro",
            "YW5CDgoMZ3JlYXRlcl90aGFuQggKBl9jb25zdCLyFAoLVUludDY0UnVsZXMS",
            "dgoFY29uc3QYASABKARCW8JIWApWCgx1aW50NjQuY29uc3QaRnRoaXMgIT0g",
            "cnVsZXMuY29uc3QgPyAndmFsdWUgbXVzdCBlcXVhbCAlcycuZm9ybWF0KFty",
            "dWxlcy5jb25zdF0pIDogJydIAlIFY29uc3SIAQESjwEKAmx0GAIgASgEQn3C",
            "SHoKeAoJdWludDY0Lmx0GmshaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxl",
            "cy5ndCkgJiYgdGhpcyA+PSBydWxlcy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVz",
            "cyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gAUgJsdBKiAQoD",
            "bHRlGAMgASgEQo0BwkiJAQqGAQoKdWludDY0Lmx0ZRp4IWhhcyhydWxlcy5n",
            "dGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2",
            "YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0",
            "KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKgBwoCZ3QYBCABKARCjQfCSIkH",
            "CnsKCXVpbnQ2NC5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5s",
            "dGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0",
            "ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKtAEKDHVpbnQ2",
            "NC5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMu",
            "Z3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFu",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvAEKFnVp",
            "bnQ2NC5ndF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVz",
            "Lmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8",
            "PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBv",
            "ciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkg",
            "OiAnJwrEAQoNdWludDY0Lmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1",
            "bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0",
            "aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "ICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKzAEKF3VpbnQ2NC5ndF9sdGVfZXhj",
            "bHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMu",
            "Z3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4g",
            "b3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0p",
            "IDogJydIAVICZ3QS7QcKA2d0ZRgFIAEoBELYB8JI1AcKiQEKCnVpbnQ2NC5n",
            "dGUaeyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlz",
            "IDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrDAQoNdWlu",
            "dDY0Lmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVz",
            "Lmx0XSkgOiAnJwrLAQoXdWludDY0Lmd0ZV9sdF9leGNsdXNpdmUarwFoYXMo",
            "cnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmIChydWxlcy5s",
            "dCA8PSB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCtMBCg51aW50",
            "NjQuZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBy",
            "dWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVz",
            "Lmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0",
            "byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrbAQoYdWludDY0Lmd0ZV9sdGVf",
            "ZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUSegoCaW4YBiADKARCasJI",
            "ZwplCgl1aW50NjQuaW4aWCEodGhpcyBpbiBkeW4ocnVsZXMpWydpbiddKSA/",
            "ICd2YWx1ZSBtdXN0IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbZHluKHJ1bGVz",
            "KVsnaW4nXV0pIDogJydSAmluEn4KBm5vdF9pbhgHIAMoBEJnwkhkCmIKDXVp",
            "bnQ2NC5ub3RfaW4aUXRoaXMgaW4gcnVsZXMubm90X2luID8gJ3ZhbHVlIG11",
            "c3Qgbm90IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbcnVsZXMubm90X2luXSkg",
            "OiAnJ1IFbm90SW5CCwoJbGVzc190aGFuQg4KDGdyZWF0ZXJfdGhhbkIICgZf",
            "Y29uc3Qi8hQKC1NJbnQzMlJ1bGVzEnYKBWNvbnN0GAEgASgRQlvCSFgKVgoM",
            "c2ludDMyLmNvbnN0GkZ0aGlzICE9IHJ1bGVzLmNvbnN0ID8gJ3ZhbHVlIG11",
            "c3QgZXF1YWwgJXMnLmZvcm1hdChbcnVsZXMuY29uc3RdKSA6ICcnSAJSBWNv",
            "bnN0iAEBEo8BCgJsdBgCIAEoEUJ9wkh6CngKCXNpbnQzMi5sdBprIWhhcyhy",
            "dWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPj0gcnVsZXMu",
            "bHQ/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxl",
            "cy5sdF0pIDogJydIAFICbHQSogEKA2x0ZRgDIAEoEUKNAcJIiQEKhgEKCnNp",
            "bnQzMi5sdGUaeCFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAm",
            "JiB0aGlzID4gcnVsZXMubHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4g",
            "b3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gAUgNs",
            "dGUSoAcKAmd0GAQgASgRQo0HwkiJBwp7CglzaW50MzIuZ3QabiFoYXMocnVs",
            "ZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDw9IHJ1bGVzLmd0",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3RdKSA6ICcnCrQBCgxzaW50MzIuZ3RfbHQaowFoYXMocnVsZXMubHQp",
            "ICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ICYmICh0aGlzID49IHJ1bGVzLmx0",
            "IHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwg",
            "cnVsZXMubHRdKSA6ICcnCrwBChZzaW50MzIuZ3RfbHRfZXhjbHVzaXZlGqEB",
            "aGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ICYmIChydWxl",
            "cy5sdCA8PSB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVz",
            "dCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQo",
            "W3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKxAEKDXNpbnQzMi5ndF9sdGUa",
            "sgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3QgJiYg",
            "KHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1",
            "ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuIG9yIGVx",
            "dWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcn",
            "CswBChdzaW50MzIuZ3RfbHRlX2V4Y2x1c2l2ZRqwAWhhcyhydWxlcy5sdGUp",
            "ICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdGUgPCB0aGlz",
            "ICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQo",
            "W3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnSAFSAmd0Eu0HCgNndGUYBSAB",
            "KBFC2AfCSNQHCokBCgpzaW50MzIuZ3RlGnshaGFzKHJ1bGVzLmx0KSAmJiAh",
            "aGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVzLmd0ZT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZV0pIDogJycKwwEKDXNpbnQzMi5ndGVfbHQasQFoYXMocnVsZXMu",
            "bHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+PSBydWxl",
            "cy5sdCB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3Jl",
            "YXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZv",
            "cm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycKywEKF3NpbnQzMi5n",
            "dGVfbHRfZXhjbHVzaXZlGq8BaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8",
            "IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlzIDwgcnVs",
            "ZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFs",
            "IHRvICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1",
            "bGVzLmx0XSkgOiAnJwrTAQoOc2ludDMyLmd0ZV9sdGUawAFoYXMocnVsZXMu",
            "bHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3RlICYmICh0aGlzID4gcnVs",
            "ZXMubHRlIHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBn",
            "cmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDog",
            "JycK2wEKGHNpbnQzMi5ndGVfbHRlX2V4Y2x1c2l2ZRq+AWhhcyhydWxlcy5s",
            "dGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHRlIDwg",
            "dGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3Jl",
            "YXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiBvciBlcXVh",
            "bCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJydI",
            "AVIDZ3RlEnoKAmluGAYgAygRQmrCSGcKZQoJc2ludDMyLmluGlghKHRoaXMg",
            "aW4gZHluKHJ1bGVzKVsnaW4nXSkgPyAndmFsdWUgbXVzdCBiZSBpbiBsaXN0",
            "ICVzJy5mb3JtYXQoW2R5bihydWxlcylbJ2luJ11dKSA6ICcnUgJpbhJ+CgZu",
            "b3RfaW4YByADKBFCZ8JIZApiCg1zaW50MzIubm90X2luGlF0aGlzIGluIHJ1",
            "bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5vdCBiZSBpbiBsaXN0ICVzJy5m",
            "b3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydSBW5vdEluQgsKCWxlc3NfdGhh",
            "bkIOCgxncmVhdGVyX3RoYW5CCAoGX2NvbnN0IvIUCgtTSW50NjRSdWxlcxJ2",
            "CgVjb25zdBgBIAEoEkJbwkhYClYKDHNpbnQ2NC5jb25zdBpGdGhpcyAhPSBy",
            "dWxlcy5jb25zdCA/ICd2YWx1ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW3J1",
            "bGVzLmNvbnN0XSkgOiAnJ0gCUgVjb25zdIgBARKPAQoCbHQYAiABKBJCfcJI",
            "egp4CglzaW50NjQubHQaayFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVz",
            "Lmd0KSAmJiB0aGlzID49IHJ1bGVzLmx0PyAndmFsdWUgbXVzdCBiZSBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMubHRdKSA6ICcnSABSAmx0EqIBCgNs",
            "dGUYAyABKBJCjQHCSIkBCoYBCgpzaW50NjQubHRlGnghaGFzKHJ1bGVzLmd0",
            "ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+IHJ1bGVzLmx0ZT8gJ3Zh",
            "bHVlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQo",
            "W3J1bGVzLmx0ZV0pIDogJydIAFIDbHRlEqAHCgJndBgEIAEoEkKNB8JIiQcK",
            "ewoJc2ludDY0Lmd0Gm4haGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0",
            "ZSkgJiYgdGhpcyA8PSBydWxlcy5ndD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0XSkgOiAnJwq0AQoMc2ludDY0",
            "Lmd0X2x0GqMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5n",
            "dCAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4g",
            "JXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq8AQoWc2lu",
            "dDY0Lmd0X2x0X2V4Y2x1c2l2ZRqhAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMu",
            "bHQgPCBydWxlcy5ndCAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlzIDw9",
            "IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9y",
            "IGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRdKSA6",
            "ICcnCsQBCg1zaW50NjQuZ3RfbHRlGrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVs",
            "ZXMubHRlID49IHJ1bGVzLmd0ICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRo",
            "aXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4g",
            "JXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxl",
            "cy5ndCwgcnVsZXMubHRlXSkgOiAnJwrMAQoXc2ludDY0Lmd0X2x0ZV9leGNs",
            "dXNpdmUasAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5n",
            "dCAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiBv",
            "ciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkg",
            "OiAnJ0gBUgJndBLtBwoDZ3RlGAUgASgSQtgHwkjUBwqJAQoKc2ludDY0Lmd0",
            "ZRp7IWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRoaXMg",
            "PCBydWxlcy5ndGU/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGVdKSA6ICcnCsMBCg1zaW50",
            "NjQuZ3RlX2x0GrEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxl",
            "cy5ndGUgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8IHJ1bGVzLmd0",
            "ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAl",
            "cyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMu",
            "bHRdKSA6ICcnCssBChdzaW50NjQuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhy",
            "dWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0",
            "IDw9IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK0wEKDnNpbnQ2",
            "NC5ndGVfbHRlGsABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1",
            "bGVzLmd0ZSAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDwgcnVsZXMu",
            "Z3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRv",
            "ICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnCtsBChhzaW50NjQuZ3RlX2x0ZV9l",
            "eGNsdXNpdmUavgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxl",
            "cy5ndGUgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0",
            "ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAl",
            "cyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RlLCBydWxlcy5sdGVdKSA6ICcnSAFSA2d0ZRJ6CgJpbhgGIAMoEkJqwkhn",
            "CmUKCXNpbnQ2NC5pbhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10pID8g",
            "J3ZhbHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVsZXMp",
            "WydpbiddXSkgOiAnJ1ICaW4SfgoGbm90X2luGAcgAygSQmfCSGQKYgoNc2lu",
            "dDY0Lm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVz",
            "dCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6",
            "ICcnUgVub3RJbkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuQggKBl9j",
            "b25zdCKCFQoMRml4ZWQzMlJ1bGVzEncKBWNvbnN0GAEgASgHQlzCSFkKVwoN",
            "Zml4ZWQzMi5jb25zdBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBt",
            "dXN0IGVxdWFsICVzJy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gCUgVj",
            "b25zdIgBARKQAQoCbHQYAiABKAdCfsJIewp5CgpmaXhlZDMyLmx0GmshaGFz",
            "KHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+PSBydWxl",
            "cy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1",
            "bGVzLmx0XSkgOiAnJ0gAUgJsdBKjAQoDbHRlGAMgASgHQo4BwkiKAQqHAQoL",
            "Zml4ZWQzMi5sdGUaeCFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0",
            "KSAmJiB0aGlzID4gcnVsZXMubHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRo",
            "YW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gA",
            "UgNsdGUSpQcKAmd0GAQgASgHQpIHwkiOBwp8CgpmaXhlZDMyLmd0Gm4haGFz",
            "KHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8PSBydWxl",
            "cy5ndD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzJy5mb3JtYXQo",
            "W3J1bGVzLmd0XSkgOiAnJwq1AQoNZml4ZWQzMi5ndF9sdBqjAWhhcyhydWxl",
            "cy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPj0gcnVs",
            "ZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0LCBydWxlcy5sdF0pIDogJycKvQEKF2ZpeGVkMzIuZ3RfbHRfZXhjbHVz",
            "aXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ICYm",
            "IChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKxQEKDmZpeGVkMzIu",
            "Z3RfbHRlGrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVz",
            "Lmd0ICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3Qp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRl",
            "XSkgOiAnJwrNAQoYZml4ZWQzMi5ndF9sdGVfZXhjbHVzaXZlGrABaGFzKHJ1",
            "bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0",
            "ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJydIAVICZ3QS8gcK",
            "A2d0ZRgFIAEoB0LdB8JI2QcKigEKC2ZpeGVkMzIuZ3RlGnshaGFzKHJ1bGVz",
            "Lmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVzLmd0ZT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKxAEKDmZpeGVkMzIuZ3RlX2x0GrEB",
            "aGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndGUgJiYgKHRo",
            "aXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCswB",
            "ChhmaXhlZDMyLmd0ZV9sdF9leGNsdXNpdmUarwFoYXMocnVsZXMubHQpICYm",
            "IHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmIChydWxlcy5sdCA8PSB0aGlzICYm",
            "IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRo",
            "YW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCtQBCg9maXhlZDMyLmd0ZV9sdGUa",
            "wAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3RlICYm",
            "ICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxl",
            "c3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1",
            "bGVzLmx0ZV0pIDogJycK3AEKGWZpeGVkMzIuZ3RlX2x0ZV9leGNsdXNpdmUa",
            "vgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndGUgJiYg",
            "KHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1",
            "ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNz",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxl",
            "cy5sdGVdKSA6ICcnSAFSA2d0ZRJ7CgJpbhgGIAMoB0JrwkhoCmYKCmZpeGVk",
            "MzIuaW4aWCEodGhpcyBpbiBkeW4ocnVsZXMpWydpbiddKSA/ICd2YWx1ZSBt",
            "dXN0IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbZHluKHJ1bGVzKVsnaW4nXV0p",
            "IDogJydSAmluEn8KBm5vdF9pbhgHIAMoB0JowkhlCmMKDmZpeGVkMzIubm90",
            "X2luGlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5vdCBi",
            "ZSBpbiBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydSBW5v",
            "dEluQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW5CCAoGX2NvbnN0IoIV",
            "CgxGaXhlZDY0UnVsZXMSdwoFY29uc3QYASABKAZCXMJIWQpXCg1maXhlZDY0",
            "LmNvbnN0GkZ0aGlzICE9IHJ1bGVzLmNvbnN0ID8gJ3ZhbHVlIG11c3QgZXF1",
            "YWwgJXMnLmZvcm1hdChbcnVsZXMuY29uc3RdKSA6ICcnSAJSBWNvbnN0iAEB",
            "EpABCgJsdBgCIAEoBkJ+wkh7CnkKCmZpeGVkNjQubHQaayFoYXMocnVsZXMu",
            "Z3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1bGVzLmx0PyAn",
            "dmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMubHRd",
            "KSA6ICcnSABSAmx0EqMBCgNsdGUYAyABKAZCjgHCSIoBCocBCgtmaXhlZDY0",
            "Lmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRo",
            "aXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKl",
            "BwoCZ3QYBCABKAZCkgfCSI4HCnwKCmZpeGVkNjQuZ3QabiFoYXMocnVsZXMu",
            "bHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDw9IHJ1bGVzLmd0PyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RdKSA6ICcnCrUBCg1maXhlZDY0Lmd0X2x0GqMBaGFzKHJ1bGVzLmx0KSAm",
            "JiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAodGhpcyA+PSBydWxlcy5sdCB8",
            "fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1",
            "bGVzLmx0XSkgOiAnJwq9AQoXZml4ZWQ2NC5ndF9sdF9leGNsdXNpdmUaoQFo",
            "YXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVz",
            "Lmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrFAQoOZml4ZWQ2NC5ndF9sdGUa",
            "sgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3QgJiYg",
            "KHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1",
            "ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuIG9yIGVx",
            "dWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcn",
            "Cs0BChhmaXhlZDY0Lmd0X2x0ZV9leGNsdXNpdmUasAFoYXMocnVsZXMubHRl",
            "KSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndCAmJiAocnVsZXMubHRlIDwgdGhp",
            "cyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0",
            "KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJ0gBUgJndBLyBwoDZ3RlGAUg",
            "ASgGQt0HwkjZBwqKAQoLZml4ZWQ2NC5ndGUaeyFoYXMocnVsZXMubHQpICYm",
            "ICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3RlXSkgOiAnJwrEAQoOZml4ZWQ2NC5ndGVfbHQasQFoYXMocnVs",
            "ZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+PSBy",
            "dWxlcy5sdCB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUg",
            "Z3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycKzAEKGGZpeGVk",
            "NjQuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMu",
            "bHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3Rl",
            "LCBydWxlcy5sdF0pIDogJycK1AEKD2ZpeGVkNjQuZ3RlX2x0ZRrAAWhhcyhy",
            "dWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMg",
            "PiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRl",
            "XSkgOiAnJwrcAQoZZml4ZWQ2NC5ndGVfbHRlX2V4Y2x1c2l2ZRq+AWhhcyhy",
            "dWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMu",
            "bHRlIDwgdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3Qg",
            "YmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiBv",
            "ciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0p",
            "IDogJydIAVIDZ3RlEnsKAmluGAYgAygGQmvCSGgKZgoKZml4ZWQ2NC5pbhpY",
            "ISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10pID8gJ3ZhbHVlIG11c3QgYmUg",
            "aW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVsZXMpWydpbiddXSkgOiAnJ1IC",
            "aW4SfwoGbm90X2luGAcgAygGQmjCSGUKYwoOZml4ZWQ2NC5ub3RfaW4aUXRo",
            "aXMgaW4gcnVsZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJlIGluIGxp",
            "c3QgJXMnLmZvcm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90SW5CCwoJ",
            "bGVzc190aGFuQg4KDGdyZWF0ZXJfdGhhbkIICgZfY29uc3QikxUKDVNGaXhl",
            "ZDMyUnVsZXMSeAoFY29uc3QYASABKA9CXcJIWgpYCg5zZml4ZWQzMi5jb25z",
            "dBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBtdXN0IGVxdWFsICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gCUgVjb25zdIgBARKRAQoC",
            "bHQYAiABKA9Cf8JIfAp6CgtzZml4ZWQzMi5sdBprIWhhcyhydWxlcy5ndGUp",
            "ICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPj0gcnVsZXMubHQ/ICd2YWx1",
            "ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5sdF0pIDog",
            "JydIAFICbHQSpAEKA2x0ZRgDIAEoD0KPAcJIiwEKiAEKDHNmaXhlZDMyLmx0",
            "ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMg",
            "PiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVh",
            "bCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKqBwoC",
            "Z3QYBCABKA9ClwfCSJMHCn0KC3NmaXhlZDMyLmd0Gm4haGFzKHJ1bGVzLmx0",
            "KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8PSBydWxlcy5ndD8gJ3Zh",
            "bHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0",
            "XSkgOiAnJwq2AQoOc2ZpeGVkMzIuZ3RfbHQaowFoYXMocnVsZXMubHQpICYm",
            "IHJ1bGVzLmx0ID49IHJ1bGVzLmd0ICYmICh0aGlzID49IHJ1bGVzLmx0IHx8",
            "IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRo",
            "YW4gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVs",
            "ZXMubHRdKSA6ICcnCr4BChhzZml4ZWQzMi5ndF9sdF9leGNsdXNpdmUaoQFo",
            "YXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVz",
            "Lmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrGAQoPc2ZpeGVkMzIuZ3RfbHRl",
            "GrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ICYm",
            "ICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAn",
            "JwrOAQoZc2ZpeGVkMzIuZ3RfbHRlX2V4Y2x1c2l2ZRqwAWhhcyhydWxlcy5s",
            "dGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdGUgPCB0",
            "aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVh",
            "dGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3Jt",
            "YXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnSAFSAmd0EvcHCgNndGUY",
            "BSABKA9C4gfCSN4HCosBCgxzZml4ZWQzMi5ndGUaeyFoYXMocnVsZXMubHQp",
            "ICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlXSkgOiAnJwrFAQoPc2ZpeGVkMzIuZ3RlX2x0GrEBaGFz",
            "KHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndGUgJiYgKHRoaXMg",
            "Pj0gcnVsZXMubHQgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFu",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCs0BChlz",
            "Zml4ZWQzMi5ndGVfbHRfZXhjbHVzaXZlGq8BaGFzKHJ1bGVzLmx0KSAmJiBy",
            "dWxlcy5sdCA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0",
            "aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "IG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxl",
            "cy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrVAQoQc2ZpeGVkMzIuZ3RlX2x0ZRrA",
            "AWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYg",
            "KHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1",
            "ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVz",
            "cyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVs",
            "ZXMubHRlXSkgOiAnJwrdAQoac2ZpeGVkMzIuZ3RlX2x0ZV9leGNsdXNpdmUa",
            "vgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndGUgJiYg",
            "KHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1",
            "ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNz",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxl",
            "cy5sdGVdKSA6ICcnSAFSA2d0ZRJ8CgJpbhgGIAMoD0JswkhpCmcKC3NmaXhl",
            "ZDMyLmluGlghKHRoaXMgaW4gZHluKHJ1bGVzKVsnaW4nXSkgPyAndmFsdWUg",
            "bXVzdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2R5bihydWxlcylbJ2luJ11d",
            "KSA6ICcnUgJpbhKAAQoGbm90X2luGAcgAygPQmnCSGYKZAoPc2ZpeGVkMzIu",
            "bm90X2luGlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5v",
            "dCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydS",
            "BW5vdEluQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW5CCAoGX2NvbnN0",
            "IpMVCg1TRml4ZWQ2NFJ1bGVzEngKBWNvbnN0GAEgASgQQl3CSFoKWAoOc2Zp",
            "eGVkNjQuY29uc3QaRnRoaXMgIT0gcnVsZXMuY29uc3QgPyAndmFsdWUgbXVz",
            "dCBlcXVhbCAlcycuZm9ybWF0KFtydWxlcy5jb25zdF0pIDogJydIAlIFY29u",
            "c3SIAQESkQEKAmx0GAIgASgQQn/CSHwKegoLc2ZpeGVkNjQubHQaayFoYXMo",
            "cnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1bGVz",
            "Lmx0PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMubHRdKSA6ICcnSABSAmx0EqQBCgNsdGUYAyABKBBCjwHCSIsBCogBCgxz",
            "Zml4ZWQ2NC5sdGUaeCFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0",
            "KSAmJiB0aGlzID4gcnVsZXMubHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRo",
            "YW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gA",
            "UgNsdGUSqgcKAmd0GAQgASgQQpcHwkiTBwp9CgtzZml4ZWQ2NC5ndBpuIWhh",
            "cyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRoaXMgPD0gcnVs",
            "ZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5ndF0pIDogJycKtgEKDnNmaXhlZDY0Lmd0X2x0GqMBaGFzKHJ1",
            "bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAodGhpcyA+PSBy",
            "dWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUg",
            "Z3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq+AQoYc2ZpeGVkNjQuZ3RfbHRfZXhj",
            "bHVzaXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0",
            "ICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKxgEKD3NmaXhl",
            "ZDY0Lmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBy",
            "dWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDw9IHJ1bGVz",
            "Lmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNz",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVz",
            "Lmx0ZV0pIDogJycKzgEKGXNmaXhlZDY0Lmd0X2x0ZV9leGNsdXNpdmUasAFo",
            "YXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndCAmJiAocnVs",
            "ZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0",
            "byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJ0gBUgJn",
            "dBL3BwoDZ3RlGAUgASgQQuIHwkjeBwqLAQoMc2ZpeGVkNjQuZ3RlGnshaGFz",
            "KHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVz",
            "Lmd0ZT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRv",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKxQEKD3NmaXhlZDY0Lmd0",
            "ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3Rl",
            "ICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5k",
            "IGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkg",
            "OiAnJwrNAQoZc2ZpeGVkNjQuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhydWxl",
            "cy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0IDw9",
            "IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZv",
            "cm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK1QEKEHNmaXhlZDY0",
            "Lmd0ZV9sdGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxl",
            "cy5ndGUsIHJ1bGVzLmx0ZV0pIDogJycK3QEKGnNmaXhlZDY0Lmd0ZV9sdGVf",
            "ZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUSfAoCaW4YBiADKBBCbMJI",
            "aQpnCgtzZml4ZWQ2NC5pbhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10p",
            "ID8gJ3ZhbHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVs",
            "ZXMpWydpbiddXSkgOiAnJ1ICaW4SgAEKBm5vdF9pbhgHIAMoEEJpwkhmCmQK",
            "D3NmaXhlZDY0Lm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFs",
            "dWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3Rf",
            "aW5dKSA6ICcnUgVub3RJbkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFu",
            "QggKBl9jb25zdCKLAQoJQm9vbFJ1bGVzEnQKBWNvbnN0GAEgASgIQlnCSFYK",
            "VAoKYm9vbC5jb25zdBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBt",
            "dXN0IGVxdWFsICVzJy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gAUgVj",
            "b25zdIgBAUIICgZfY29uc3QirjUKC1N0cmluZ1J1bGVzEngKBWNvbnN0GAEg",
            "ASgJQl3CSFoKWAoMc3RyaW5nLmNvbnN0Gkh0aGlzICE9IHJ1bGVzLmNvbnN0",
            "ID8gJ3ZhbHVlIG11c3QgZXF1YWwgYCVzYCcuZm9ybWF0KFtydWxlcy5jb25z",
            "dF0pIDogJydIAVIFY29uc3SIAQESiAEKA2xlbhgTIAEoBEJxwkhuCmwKCnN0",
            "cmluZy5sZW4aXnVpbnQodGhpcy5zaXplKCkpICE9IHJ1bGVzLmxlbiA/ICd2",
            "YWx1ZSBsZW5ndGggbXVzdCBiZSAlcyBjaGFyYWN0ZXJzJy5mb3JtYXQoW3J1",
            "bGVzLmxlbl0pIDogJydIAlIDbGVuiAEBEqYBCgdtaW5fbGVuGAIgASgEQocB",
            "wkiDAQqAAQoOc3RyaW5nLm1pbl9sZW4abnVpbnQodGhpcy5zaXplKCkpIDwg",
            "cnVsZXMubWluX2xlbiA/ICd2YWx1ZSBsZW5ndGggbXVzdCBiZSBhdCBsZWFz",
            "dCAlcyBjaGFyYWN0ZXJzJy5mb3JtYXQoW3J1bGVzLm1pbl9sZW5dKSA6ICcn",
            "SANSBm1pbkxlbogBARKkAQoHbWF4X2xlbhgDIAEoBEKFAcJIgQEKfwoOc3Ry",
            "aW5nLm1heF9sZW4abXVpbnQodGhpcy5zaXplKCkpID4gcnVsZXMubWF4X2xl",
            "biA/ICd2YWx1ZSBsZW5ndGggbXVzdCBiZSBhdCBtb3N0ICVzIGNoYXJhY3Rl",
            "cnMnLmZvcm1hdChbcnVsZXMubWF4X2xlbl0pIDogJydIBFIGbWF4TGVuiAEB",
            "EqoBCglsZW5fYnl0ZXMYFCABKARChwHCSIMBCoABChBzdHJpbmcubGVuX2J5",
            "dGVzGmx1aW50KGJ5dGVzKHRoaXMpLnNpemUoKSkgIT0gcnVsZXMubGVuX2J5",
            "dGVzID8gJ3ZhbHVlIGxlbmd0aCBtdXN0IGJlICVzIGJ5dGVzJy5mb3JtYXQo",
            "W3J1bGVzLmxlbl9ieXRlc10pIDogJydIBVIIbGVuQnl0ZXOIAQESsgEKCW1p",
            "bl9ieXRlcxgEIAEoBEKPAcJIiwEKiAEKEHN0cmluZy5taW5fYnl0ZXMadHVp",
            "bnQoYnl0ZXModGhpcykuc2l6ZSgpKSA8IHJ1bGVzLm1pbl9ieXRlcyA/ICd2",
            "YWx1ZSBsZW5ndGggbXVzdCBiZSBhdCBsZWFzdCAlcyBieXRlcycuZm9ybWF0",
            "KFtydWxlcy5taW5fYnl0ZXNdKSA6ICcnSAZSCG1pbkJ5dGVziAEBErEBCglt",
            "YXhfYnl0ZXMYBSABKARCjgHCSIoBCocBChBzdHJpbmcubWF4X2J5dGVzGnN1",
            "aW50KGJ5dGVzKHRoaXMpLnNpemUoKSkgPiBydWxlcy5tYXhfYnl0ZXMgPyAn",
            "dmFsdWUgbGVuZ3RoIG11c3QgYmUgYXQgbW9zdCAlcyBieXRlcycuZm9ybWF0",
            "KFtydWxlcy5tYXhfYnl0ZXNdKSA6ICcnSAdSCG1heEJ5dGVziAEBEpsBCgdw",
            "YXR0ZXJuGAYgASgJQnzCSHkKdwoOc3RyaW5nLnBhdHRlcm4aZSF0aGlzLm1h",
            "dGNoZXMocnVsZXMucGF0dGVybikgPyAndmFsdWUgZG9lcyBub3QgbWF0Y2gg",
            "cmVnZXggcGF0dGVybiBgJXNgJy5mb3JtYXQoW3J1bGVzLnBhdHRlcm5dKSA6",
            "ICcnSAhSB3BhdHRlcm6IAQESkQEKBnByZWZpeBgHIAEoCUJ0wkhxCm8KDXN0",
            "cmluZy5wcmVmaXgaXiF0aGlzLnN0YXJ0c1dpdGgocnVsZXMucHJlZml4KSA/",
            "ICd2YWx1ZSBkb2VzIG5vdCBoYXZlIHByZWZpeCBgJXNgJy5mb3JtYXQoW3J1",
            "bGVzLnByZWZpeF0pIDogJydICVIGcHJlZml4iAEBEo8BCgZzdWZmaXgYCCAB",
            "KAlCcsJIbwptCg1zdHJpbmcuc3VmZml4GlwhdGhpcy5lbmRzV2l0aChydWxl",
            "cy5zdWZmaXgpID8gJ3ZhbHVlIGRvZXMgbm90IGhhdmUgc3VmZml4IGAlc2An",
            "LmZvcm1hdChbcnVsZXMuc3VmZml4XSkgOiAnJ0gKUgZzdWZmaXiIAQESnwEK",
            "CGNvbnRhaW5zGAkgASgJQn7CSHsKeQoPc3RyaW5nLmNvbnRhaW5zGmYhdGhp",
            "cy5jb250YWlucyhydWxlcy5jb250YWlucykgPyAndmFsdWUgZG9lcyBub3Qg",
            "Y29udGFpbiBzdWJzdHJpbmcgYCVzYCcuZm9ybWF0KFtydWxlcy5jb250YWlu",
            "c10pIDogJydIC1IIY29udGFpbnOIAQESqgEKDG5vdF9jb250YWlucxgXIAEo",
            "CUKBAcJIfgp8ChNzdHJpbmcubm90X2NvbnRhaW5zGmV0aGlzLmNvbnRhaW5z",
            "KHJ1bGVzLm5vdF9jb250YWlucykgPyAndmFsdWUgY29udGFpbnMgc3Vic3Ry",
            "aW5nIGAlc2AnLmZvcm1hdChbcnVsZXMubm90X2NvbnRhaW5zXSkgOiAnJ0gM",
            "Ugtub3RDb250YWluc4gBARJ6CgJpbhgKIAMoCUJqwkhnCmUKCXN0cmluZy5p",
            "bhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10pID8gJ3ZhbHVlIG11c3Qg",
            "YmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVsZXMpWydpbiddXSkgOiAn",
            "J1ICaW4SfgoGbm90X2luGAsgAygJQmfCSGQKYgoNc3RyaW5nLm5vdF9pbhpR",
            "dGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4g",
            "bGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhLG",
            "AQoFZW1haWwYDCABKAhCrQHCSKkBClEKDHN0cmluZy5lbWFpbBIjdmFsdWUg",
            "bXVzdCBiZSBhIHZhbGlkIGVtYWlsIGFkZHJlc3MaHHRoaXMgPT0gJycgfHwg",
            "dGhpcy5pc0VtYWlsKCkKVAoSc3RyaW5nLmVtYWlsX2VtcHR5EjJ2YWx1ZSBp",
            "cyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzcxoK",
            "dGhpcyAhPSAnJ0gAUgVlbWFpbBLLAQoIaG9zdG5hbWUYDSABKAhCrAHCSKgB",
            "ClIKD3N0cmluZy5ob3N0bmFtZRIedmFsdWUgbXVzdCBiZSBhIHZhbGlkIGhv",
            "c3RuYW1lGh90aGlzID09ICcnIHx8IHRoaXMuaXNIb3N0bmFtZSgpClIKFXN0",
            "cmluZy5ob3N0bmFtZV9lbXB0eRItdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlz",
            "IG5vdCBhIHZhbGlkIGhvc3RuYW1lGgp0aGlzICE9ICcnSABSCGhvc3RuYW1l",
            "ErEBCgJpcBgOIAEoCEKeAcJImgEKSAoJc3RyaW5nLmlwEiB2YWx1ZSBtdXN0",
            "IGJlIGEgdmFsaWQgSVAgYWRkcmVzcxoZdGhpcyA9PSAnJyB8fCB0aGlzLmlz",
            "SXAoKQpOCg9zdHJpbmcuaXBfZW1wdHkSL3ZhbHVlIGlzIGVtcHR5LCB3aGlj",
            "aCBpcyBub3QgYSB2YWxpZCBJUCBhZGRyZXNzGgp0aGlzICE9ICcnSABSAmlw",
            "Er4BCgRpcHY0GA8gASgIQqcBwkijAQpNCgtzdHJpbmcuaXB2NBIidmFsdWUg",
            "bXVzdCBiZSBhIHZhbGlkIElQdjQgYWRkcmVzcxoadGhpcyA9PSAnJyB8fCB0",
            "aGlzLmlzSXAoNCkKUgoRc3RyaW5nLmlwdjRfZW1wdHkSMXZhbHVlIGlzIGVt",
            "cHR5LCB3aGljaCBpcyBub3QgYSB2YWxpZCBJUHY0IGFkZHJlc3MaCnRoaXMg",
            "IT0gJydIAFIEaXB2NBK+AQoEaXB2NhgQIAEoCEKnAcJIowEKTQoLc3RyaW5n",
            "LmlwdjYSInZhbHVlIG11c3QgYmUgYSB2YWxpZCBJUHY2IGFkZHJlc3MaGnRo",
            "aXMgPT0gJycgfHwgdGhpcy5pc0lwKDYpClIKEXN0cmluZy5pcHY2X2VtcHR5",
            "EjF2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgSVB2NiBh",
            "ZGRyZXNzGgp0aGlzICE9ICcnSABSBGlwdjYSqAEKA3VyaRgRIAEoCEKTAcJI",
            "jwEKQwoKc3RyaW5nLnVyaRIZdmFsdWUgbXVzdCBiZSBhIHZhbGlkIFVSSRoa",
            "dGhpcyA9PSAnJyB8fCB0aGlzLmlzVXJpKCkKSAoQc3RyaW5nLnVyaV9lbXB0",
            "eRIodmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIFVSSRoK",
            "dGhpcyAhPSAnJ0gAUgN1cmkSXAoHdXJpX3JlZhgSIAEoCEJBwkg+CjwKDnN0",
            "cmluZy51cmlfcmVmEhl2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgVVJJGg90aGlz",
            "LmlzVXJpUmVmKClIAFIGdXJpUmVmEvQBCgdhZGRyZXNzGBUgASgIQtcBwkjT",
            "AQpvCg5zdHJpbmcuYWRkcmVzcxItdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGhv",
            "c3RuYW1lLCBvciBpcCBhZGRyZXNzGi50aGlzID09ICcnIHx8IHRoaXMuaXNI",
            "b3N0bmFtZSgpIHx8IHRoaXMuaXNJcCgpCmAKFHN0cmluZy5hZGRyZXNzX2Vt",
            "cHR5Ejx2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgaG9z",
            "dG5hbWUsIG9yIGlwIGFkZHJlc3MaCnRoaXMgIT0gJydIAFIHYWRkcmVzcxKA",
            "AgoEdXVpZBgWIAEoCELpAcJI5QEKlgEKC3N0cmluZy51dWlkEhp2YWx1ZSBt",
            "dXN0IGJlIGEgdmFsaWQgVVVJRBprdGhpcyA9PSAnJyB8fCB0aGlzLm1hdGNo",
            "ZXMoJ15bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1G",
            "XXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kJykKSgoRc3Ry",
            "aW5nLnV1aWRfZW1wdHkSKXZhbHVlIGlzIGVtcHR5LCB3aGljaCBpcyBub3Qg",
            "YSB2YWxpZCBVVUlEGgp0aGlzICE9ICcnSABSBHV1aWQS1wEKBXR1dWlkGCEg",
            "ASgIQr4Bwki6AQpjCgxzdHJpbmcudHV1aWQSInZhbHVlIG11c3QgYmUgYSB2",
            "YWxpZCB0cmltbWVkIFVVSUQaL3RoaXMgPT0gJycgfHwgdGhpcy5tYXRjaGVz",
            "KCdeWzAtOWEtZkEtRl17MzJ9JCcpClMKEnN0cmluZy50dXVpZF9lbXB0eRIx",
            "dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIHRyaW1tZWQg",
            "VVVJRBoKdGhpcyAhPSAnJ0gAUgV0dXVpZBLvAQoRaXBfd2l0aF9wcmVmaXhs",
            "ZW4YGiABKAhCwAHCSLwBClwKGHN0cmluZy5pcF93aXRoX3ByZWZpeGxlbhIf",
            "dmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQIHByZWZpeBofdGhpcyA9PSAnJyB8",
            "fCB0aGlzLmlzSXBQcmVmaXgoKQpcCh5zdHJpbmcuaXBfd2l0aF9wcmVmaXhs",
            "ZW5fZW1wdHkSLnZhbHVlIGlzIGVtcHR5LCB3aGljaCBpcyBub3QgYSB2YWxp",
            "ZCBJUCBwcmVmaXgaCnRoaXMgIT0gJydIAFIPaXBXaXRoUHJlZml4bGVuEqQC",
            "ChNpcHY0X3dpdGhfcHJlZml4bGVuGBsgASgIQvEBwkjtAQp1ChpzdHJpbmcu",
            "aXB2NF93aXRoX3ByZWZpeGxlbhI1dmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQ",
            "djQgYWRkcmVzcyB3aXRoIHByZWZpeCBsZW5ndGgaIHRoaXMgPT0gJycgfHwg",
            "dGhpcy5pc0lwUHJlZml4KDQpCnQKIHN0cmluZy5pcHY0X3dpdGhfcHJlZml4",
            "bGVuX2VtcHR5EkR2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFs",
            "aWQgSVB2NCBhZGRyZXNzIHdpdGggcHJlZml4IGxlbmd0aBoKdGhpcyAhPSAn",
            "J0gAUhFpcHY0V2l0aFByZWZpeGxlbhKkAgoTaXB2Nl93aXRoX3ByZWZpeGxl",
            "bhgcIAEoCELxAcJI7QEKdQoac3RyaW5nLmlwdjZfd2l0aF9wcmVmaXhsZW4S",
            "NXZhbHVlIG11c3QgYmUgYSB2YWxpZCBJUHY2IGFkZHJlc3Mgd2l0aCBwcmVm",
            "aXggbGVuZ3RoGiB0aGlzID09ICcnIHx8IHRoaXMuaXNJcFByZWZpeCg2KQp0",
            "CiBzdHJpbmcuaXB2Nl93aXRoX3ByZWZpeGxlbl9lbXB0eRJEdmFsdWUgaXMg",
            "ZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQdjYgYWRkcmVzcyB3aXRo",
            "IHByZWZpeCBsZW5ndGgaCnRoaXMgIT0gJydIAFIRaXB2NldpdGhQcmVmaXhs",
            "ZW4S1AEKCWlwX3ByZWZpeBgdIAEoCEK0AcJIsAEKWAoQc3RyaW5nLmlwX3By",
            "ZWZpeBIfdmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQIHByZWZpeBojdGhpcyA9",
            "PSAnJyB8fCB0aGlzLmlzSXBQcmVmaXgodHJ1ZSkKVAoWc3RyaW5nLmlwX3By",
            "ZWZpeF9lbXB0eRIudmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZh",
            "bGlkIElQIHByZWZpeBoKdGhpcyAhPSAnJ0gAUghpcFByZWZpeBLjAQoLaXB2",
            "NF9wcmVmaXgYHiABKAhCvwHCSLsBCl8KEnN0cmluZy5pcHY0X3ByZWZpeBIh",
            "dmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQdjQgcHJlZml4GiZ0aGlzID09ICcn",
            "IHx8IHRoaXMuaXNJcFByZWZpeCg0LCB0cnVlKQpYChhzdHJpbmcuaXB2NF9w",
            "cmVmaXhfZW1wdHkSMHZhbHVlIGlzIGVtcHR5LCB3aGljaCBpcyBub3QgYSB2",
            "YWxpZCBJUHY0IHByZWZpeBoKdGhpcyAhPSAnJ0gAUgppcHY0UHJlZml4EuMB",
            "CgtpcHY2X3ByZWZpeBgfIAEoCEK/AcJIuwEKXwoSc3RyaW5nLmlwdjZfcHJl",
            "Zml4EiF2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSVB2NiBwcmVmaXgaJnRoaXMg",
            "PT0gJycgfHwgdGhpcy5pc0lwUHJlZml4KDYsIHRydWUpClgKGHN0cmluZy5p",
            "cHY2X3ByZWZpeF9lbXB0eRIwdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5v",
            "dCBhIHZhbGlkIElQdjYgcHJlZml4Ggp0aGlzICE9ICcnSABSCmlwdjZQcmVm",
            "aXgSkgIKDWhvc3RfYW5kX3BvcnQYICABKAhC6wHCSOcBCoEBChRzdHJpbmcu",
            "aG9zdF9hbmRfcG9ydBJBdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGhvc3QgKGhv",
            "c3RuYW1lIG9yIElQIGFkZHJlc3MpIGFuZCBwb3J0IHBhaXIaJnRoaXMgPT0g",
            "JycgfHwgdGhpcy5pc0hvc3RBbmRQb3J0KHRydWUpCmEKGnN0cmluZy5ob3N0",
            "X2FuZF9wb3J0X2VtcHR5Ejd2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90",
            "IGEgdmFsaWQgaG9zdCBhbmQgcG9ydCBwYWlyGgp0aGlzICE9ICcnSABSC2hv",
            "c3RBbmRQb3J0ErgFChB3ZWxsX2tub3duX3JlZ2V4GBggASgOMhguYnVmLnZh",
            "bGlkYXRlLktub3duUmVnZXhC8QTCSO0ECvABCiNzdHJpbmcud2VsbF9rbm93",
            "bl9yZWdleC5oZWFkZXJfbmFtZRImdmFsdWUgbXVzdCBiZSBhIHZhbGlkIEhU",
            "VFAgaGVhZGVyIG5hbWUaoAFydWxlcy53ZWxsX2tub3duX3JlZ2V4ICE9IDEg",
            "fHwgdGhpcyA9PSAnJyB8fCB0aGlzLm1hdGNoZXMoIWhhcyhydWxlcy5zdHJp",
            "Y3QpIHx8IHJ1bGVzLnN0cmljdCA/J146P1swLTlhLXpBLVohIyQlJlwnKist",
            "Ll5ffH5ceDYwXSskJyA6J15bXlx1MDAwMFx1MDAwQVx1MDAwRF0rJCcpCo0B",
            "CilzdHJpbmcud2VsbF9rbm93bl9yZWdleC5oZWFkZXJfbmFtZV9lbXB0eRI1",
            "dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIEhUVFAgaGVh",
            "ZGVyIG5hbWUaKXJ1bGVzLndlbGxfa25vd25fcmVnZXggIT0gMSB8fCB0aGlz",
            "ICE9ICcnCucBCiRzdHJpbmcud2VsbF9rbm93bl9yZWdleC5oZWFkZXJfdmFs",
            "dWUSJ3ZhbHVlIG11c3QgYmUgYSB2YWxpZCBIVFRQIGhlYWRlciB2YWx1ZRqV",
            "AXJ1bGVzLndlbGxfa25vd25fcmVnZXggIT0gMiB8fCB0aGlzLm1hdGNoZXMo",
            "IWhhcyhydWxlcy5zdHJpY3QpIHx8IHJ1bGVzLnN0cmljdCA/J15bXlx1MDAw",
            "MC1cdTAwMDhcdTAwMEEtXHUwMDFGXHUwMDdGXSokJyA6J15bXlx1MDAwMFx1",
            "MDAwQVx1MDAwRF0qJCcpSABSDndlbGxLbm93blJlZ2V4EhsKBnN0cmljdBgZ",
            "IAEoCEgNUgZzdHJpY3SIAQFCDAoKd2VsbF9rbm93bkIICgZfY29uc3RCBgoE",
            "X2xlbkIKCghfbWluX2xlbkIKCghfbWF4X2xlbkIMCgpfbGVuX2J5dGVzQgwK",
            "Cl9taW5fYnl0ZXNCDAoKX21heF9ieXRlc0IKCghfcGF0dGVybkIJCgdfcHJl",
            "Zml4QgkKB19zdWZmaXhCCwoJX2NvbnRhaW5zQg8KDV9ub3RfY29udGFpbnNC",
            "CQoHX3N0cmljdCKOEQoKQnl0ZXNSdWxlcxJyCgVjb25zdBgBIAEoDEJXwkhU",
            "ClIKC2J5dGVzLmNvbnN0GkN0aGlzICE9IHJ1bGVzLmNvbnN0ID8gJ3ZhbHVl",
            "IG11c3QgYmUgJXgnLmZvcm1hdChbcnVsZXMuY29uc3RdKSA6ICcnSAFSBWNv",
            "bnN0iAEBEoIBCgNsZW4YDSABKARCa8JIaApmCglieXRlcy5sZW4aWXVpbnQo",
            "dGhpcy5zaXplKCkpICE9IHJ1bGVzLmxlbiA/ICd2YWx1ZSBsZW5ndGggbXVz",
            "dCBiZSAlcyBieXRlcycuZm9ybWF0KFtydWxlcy5sZW5dKSA6ICcnSAJSA2xl",
            "bogBARKdAQoHbWluX2xlbhgCIAEoBEJ/wkh8CnoKDWJ5dGVzLm1pbl9sZW4a",
            "aXVpbnQodGhpcy5zaXplKCkpIDwgcnVsZXMubWluX2xlbiA/ICd2YWx1ZSBs",
            "ZW5ndGggbXVzdCBiZSBhdCBsZWFzdCAlcyBieXRlcycuZm9ybWF0KFtydWxl",
            "cy5taW5fbGVuXSkgOiAnJ0gDUgZtaW5MZW6IAQESlQEKB21heF9sZW4YAyAB",
            "KARCd8JIdApyCg1ieXRlcy5tYXhfbGVuGmF1aW50KHRoaXMuc2l6ZSgpKSA+",
            "IHJ1bGVzLm1heF9sZW4gPyAndmFsdWUgbXVzdCBiZSBhdCBtb3N0ICVzIGJ5",
            "dGVzJy5mb3JtYXQoW3J1bGVzLm1heF9sZW5dKSA6ICcnSARSBm1heExlbogB",
            "ARKeAQoHcGF0dGVybhgEIAEoCUJ/wkh8CnoKDWJ5dGVzLnBhdHRlcm4aaSFz",
            "dHJpbmcodGhpcykubWF0Y2hlcyhydWxlcy5wYXR0ZXJuKSA/ICd2YWx1ZSBt",
            "dXN0IG1hdGNoIHJlZ2V4IHBhdHRlcm4gYCVzYCcuZm9ybWF0KFtydWxlcy5w",
            "YXR0ZXJuXSkgOiAnJ0gFUgdwYXR0ZXJuiAEBEo4BCgZwcmVmaXgYBSABKAxC",
            "ccJIbgpsCgxieXRlcy5wcmVmaXgaXCF0aGlzLnN0YXJ0c1dpdGgocnVsZXMu",
            "cHJlZml4KSA/ICd2YWx1ZSBkb2VzIG5vdCBoYXZlIHByZWZpeCAleCcuZm9y",
            "bWF0KFtydWxlcy5wcmVmaXhdKSA6ICcnSAZSBnByZWZpeIgBARKMAQoGc3Vm",
            "Zml4GAYgASgMQm/CSGwKagoMYnl0ZXMuc3VmZml4GlohdGhpcy5lbmRzV2l0",
            "aChydWxlcy5zdWZmaXgpID8gJ3ZhbHVlIGRvZXMgbm90IGhhdmUgc3VmZml4",
            "ICV4Jy5mb3JtYXQoW3J1bGVzLnN1ZmZpeF0pIDogJydIB1IGc3VmZml4iAEB",
            "EpIBCghjb250YWlucxgHIAEoDEJxwkhuCmwKDmJ5dGVzLmNvbnRhaW5zGloh",
            "dGhpcy5jb250YWlucyhydWxlcy5jb250YWlucykgPyAndmFsdWUgZG9lcyBu",
            "b3QgY29udGFpbiAleCcuZm9ybWF0KFtydWxlcy5jb250YWluc10pIDogJydI",
            "CFIIY29udGFpbnOIAQESmwEKAmluGAggAygMQooBwkiGAQqDAQoIYnl0ZXMu",
            "aW4ad2R5bihydWxlcylbJ2luJ10uc2l6ZSgpID4gMCAmJiAhKHRoaXMgaW4g",
            "ZHluKHJ1bGVzKVsnaW4nXSkgPyAndmFsdWUgbXVzdCBiZSBpbiBsaXN0ICVz",
            "Jy5mb3JtYXQoW2R5bihydWxlcylbJ2luJ11dKSA6ICcnUgJpbhJ9CgZub3Rf",
            "aW4YCSADKAxCZsJIYwphCgxieXRlcy5ub3RfaW4aUXRoaXMgaW4gcnVsZXMu",
            "bm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJlIGluIGxpc3QgJXMnLmZvcm1h",
            "dChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90SW4S1QEKAmlwGAogASgIQsIB",
            "wki+AQpnCghieXRlcy5pcBIgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQIGFk",
            "ZHJlc3MaOXRoaXMuc2l6ZSgpID09IDAgfHwgdGhpcy5zaXplKCkgPT0gNCB8",
            "fCB0aGlzLnNpemUoKSA9PSAxNgpTCg5ieXRlcy5pcF9lbXB0eRIvdmFsdWUg",
            "aXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQIGFkZHJlc3MaEHRo",
            "aXMuc2l6ZSgpICE9IDBIAFICaXASzAEKBGlwdjQYCyABKAhCtQHCSLEBClYK",
            "CmJ5dGVzLmlwdjQSInZhbHVlIG11c3QgYmUgYSB2YWxpZCBJUHY0IGFkZHJl",
            "c3MaJHRoaXMuc2l6ZSgpID09IDAgfHwgdGhpcy5zaXplKCkgPT0gNApXChBi",
            "eXRlcy5pcHY0X2VtcHR5EjF2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90",
            "IGEgdmFsaWQgSVB2NCBhZGRyZXNzGhB0aGlzLnNpemUoKSAhPSAwSABSBGlw",
            "djQSzQEKBGlwdjYYDCABKAhCtgHCSLIBClcKCmJ5dGVzLmlwdjYSInZhbHVl",
            "IG11c3QgYmUgYSB2YWxpZCBJUHY2IGFkZHJlc3MaJXRoaXMuc2l6ZSgpID09",
            "IDAgfHwgdGhpcy5zaXplKCkgPT0gMTYKVwoQYnl0ZXMuaXB2Nl9lbXB0eRIx",
            "dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQdjYgYWRk",
            "cmVzcxoQdGhpcy5zaXplKCkgIT0gMEgAUgRpcHY2QgwKCndlbGxfa25vd25C",
            "CAoGX2NvbnN0QgYKBF9sZW5CCgoIX21pbl9sZW5CCgoIX21heF9sZW5CCgoI",
            "X3BhdHRlcm5CCQoHX3ByZWZpeEIJCgdfc3VmZml4QgsKCV9jb250YWlucyK8",
            "AwoJRW51bVJ1bGVzEnQKBWNvbnN0GAEgASgFQlnCSFYKVAoKZW51bS5jb25z",
            "dBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBtdXN0IGVxdWFsICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gAUgVjb25zdIgBARImCgxk",
            "ZWZpbmVkX29ubHkYAiABKAhIAVILZGVmaW5lZE9ubHmIAQESeAoCaW4YAyAD",
            "KAVCaMJIZQpjCgdlbnVtLmluGlghKHRoaXMgaW4gZHluKHJ1bGVzKVsnaW4n",
            "XSkgPyAndmFsdWUgbXVzdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2R5bihy",
            "dWxlcylbJ2luJ11dKSA6ICcnUgJpbhJ8CgZub3RfaW4YBCADKAVCZcJIYgpg",
            "CgtlbnVtLm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUg",
            "bXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5d",
            "KSA6ICcnUgVub3RJbkIICgZfY29uc3RCDwoNX2RlZmluZWRfb25seSLNBAoN",
            "UmVwZWF0ZWRSdWxlcxKtAQoJbWluX2l0ZW1zGAEgASgEQooBwkiGAQqDAQoS",
            "cmVwZWF0ZWQubWluX2l0ZW1zGm11aW50KHRoaXMuc2l6ZSgpKSA8IHJ1bGVz",
            "Lm1pbl9pdGVtcyA/ICd2YWx1ZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJWQg",
            "aXRlbShzKScuZm9ybWF0KFtydWxlcy5taW5faXRlbXNdKSA6ICcnSABSCG1p",
            "bkl0ZW1ziAEBErEBCgltYXhfaXRlbXMYAiABKARCjgHCSIoBCocBChJyZXBl",
            "YXRlZC5tYXhfaXRlbXMacXVpbnQodGhpcy5zaXplKCkpID4gcnVsZXMubWF4",
            "X2l0ZW1zID8gJ3ZhbHVlIG11c3QgY29udGFpbiBubyBtb3JlIHRoYW4gJXMg",
            "aXRlbShzKScuZm9ybWF0KFtydWxlcy5tYXhfaXRlbXNdKSA6ICcnSAFSCG1h",
            "eEl0ZW1ziAEBEmwKBnVuaXF1ZRgDIAEoCEJPwkhMCkoKD3JlcGVhdGVkLnVu",
            "aXF1ZRIocmVwZWF0ZWQgdmFsdWUgbXVzdCBjb250YWluIHVuaXF1ZSBpdGVt",
            "cxoNdGhpcy51bmlxdWUoKUgCUgZ1bmlxdWWIAQESOQoFaXRlbXMYBCABKAsy",
            "Hi5idWYudmFsaWRhdGUuRmllbGRDb25zdHJhaW50c0gDUgVpdGVtc4gBAUIM",
            "CgpfbWluX2l0ZW1zQgwKCl9tYXhfaXRlbXNCCQoHX3VuaXF1ZUIICgZfaXRl",
            "bXMi8QMKCE1hcFJ1bGVzEp4BCgltaW5fcGFpcnMYASABKARCfMJIeQp3Cg1t",
            "YXAubWluX3BhaXJzGmZ1aW50KHRoaXMuc2l6ZSgpKSA8IHJ1bGVzLm1pbl9w",
            "YWlycyA/ICdtYXAgbXVzdCBiZSBhdCBsZWFzdCAlZCBlbnRyaWVzJy5mb3Jt",
            "YXQoW3J1bGVzLm1pbl9wYWlyc10pIDogJydIAFIIbWluUGFpcnOIAQESnQEK",
            "CW1heF9wYWlycxgCIAEoBEJ7wkh4CnYKDW1hcC5tYXhfcGFpcnMaZXVpbnQo",
            "dGhpcy5zaXplKCkpID4gcnVsZXMubWF4X3BhaXJzID8gJ21hcCBtdXN0IGJl",
            "IGF0IG1vc3QgJWQgZW50cmllcycuZm9ybWF0KFtydWxlcy5tYXhfcGFpcnNd",
            "KSA6ICcnSAFSCG1heFBhaXJziAEBEjcKBGtleXMYBCABKAsyHi5idWYudmFs",
            "aWRhdGUuRmllbGRDb25zdHJhaW50c0gCUgRrZXlziAEBEjsKBnZhbHVlcxgF",
            "IAEoCzIeLmJ1Zi52YWxpZGF0ZS5GaWVsZENvbnN0cmFpbnRzSANSBnZhbHVl",
            "c4gBAUIMCgpfbWluX3BhaXJzQgwKCl9tYXhfcGFpcnNCBwoFX2tleXNCCQoH",
            "X3ZhbHVlcyIxCghBbnlSdWxlcxIOCgJpbhgCIAMoCVICaW4SFQoGbm90X2lu",
            "GAMgAygJUgVub3RJbiLSFgoNRHVyYXRpb25SdWxlcxKTAQoFY29uc3QYAiAB",
            "KAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CXcJIWgpYCg5kdXJhdGlv",
            "bi5jb25zdBpGdGhpcyAhPSBydWxlcy5jb25zdCA/ICd2YWx1ZSBtdXN0IGVx",
            "dWFsICVzJy5mb3JtYXQoW3J1bGVzLmNvbnN0XSkgOiAnJ0gCUgVjb25zdIgB",
            "ARKsAQoCbHQYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25Cf8JI",
            "fAp6CgtkdXJhdGlvbi5sdBprIWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVs",
            "ZXMuZ3QpICYmIHRoaXMgPj0gcnVsZXMubHQ/ICd2YWx1ZSBtdXN0IGJlIGxl",
            "c3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5sdF0pIDogJydIAFICbHQSvwEK",
            "A2x0ZRgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkKPAcJIiwEK",
            "iAEKDGR1cmF0aW9uLmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVs",
            "ZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJlIGxl",
            "c3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVdKSA6",
            "ICcnSABSA2x0ZRLFBwoCZ3QYBSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVy",
            "YXRpb25ClwfCSJMHCn0KC2R1cmF0aW9uLmd0Gm4haGFzKHJ1bGVzLmx0KSAm",
            "JiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8PSBydWxlcy5ndD8gJ3ZhbHVl",
            "IG11c3QgYmUgZ3JlYXRlciB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0XSkg",
            "OiAnJwq2AQoOZHVyYXRpb24uZ3RfbHQaowFoYXMocnVsZXMubHQpICYmIHJ1",
            "bGVzLmx0ID49IHJ1bGVzLmd0ICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRo",
            "aXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4g",
            "JXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMu",
            "bHRdKSA6ICcnCr4BChhkdXJhdGlvbi5ndF9sdF9leGNsdXNpdmUaoQFoYXMo",
            "cnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0",
            "IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrGAQoPZHVyYXRpb24uZ3RfbHRlGrIB",
            "aGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ICYmICh0",
            "aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVh",
            "bCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJwrO",
            "AQoZZHVyYXRpb24uZ3RfbHRlX2V4Y2x1c2l2ZRqwAWhhcyhydWxlcy5sdGUp",
            "ICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdGUgPCB0aGlz",
            "ICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQo",
            "W3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnSAFSAmd0EpIICgNndGUYBiAB",
            "KAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25C4gfCSN4HCosBCgxkdXJh",
            "dGlvbi5ndGUaeyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAm",
            "JiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRo",
            "YW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrF",
            "AQoPZHVyYXRpb24uZ3RlX2x0GrEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5s",
            "dCA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0",
            "ZSwgcnVsZXMubHRdKSA6ICcnCs0BChlkdXJhdGlvbi5ndGVfbHRfZXhjbHVz",
            "aXZlGq8BaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ZSAm",
            "JiAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3Zh",
            "bHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxl",
            "c3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAn",
            "JwrVAQoQZHVyYXRpb24uZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1",
            "bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwg",
            "dGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhh",
            "biBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrdAQoaZHVy",
            "YXRpb24uZ3RlX2x0ZV9leGNsdXNpdmUavgFoYXMocnVsZXMubHRlKSAmJiBy",
            "dWxlcy5sdGUgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYg",
            "dGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhh",
            "biBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnSAFSA2d0ZRKX",
            "AQoCaW4YByADKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CbMJIaQpn",
            "CgtkdXJhdGlvbi5pbhpYISh0aGlzIGluIGR5bihydWxlcylbJ2luJ10pID8g",
            "J3ZhbHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtkeW4ocnVsZXMp",
            "WydpbiddXSkgOiAnJ1ICaW4SmwEKBm5vdF9pbhgIIAMoCzIZLmdvb2dsZS5w",
            "cm90b2J1Zi5EdXJhdGlvbkJpwkhmCmQKD2R1cmF0aW9uLm5vdF9pbhpRdGhp",
            "cyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlz",
            "dCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbkILCgls",
            "ZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuQggKBl9jb25zdCLKFwoOVGltZXN0",
            "YW1wUnVsZXMSlQEKBWNvbnN0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcEJewkhbClkKD3RpbWVzdGFtcC5jb25zdBpGdGhpcyAhPSBydWxl",
            "cy5jb25zdCA/ICd2YWx1ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW3J1bGVz",
            "LmNvbnN0XSkgOiAnJ0gCUgVjb25zdIgBARKvAQoCbHQYAyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wQoABwkh9CnsKDHRpbWVzdGFtcC5sdBpr",
            "IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPj0g",
            "cnVsZXMubHQ/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5sdF0pIDogJydIAFICbHQSwQEKA2x0ZRgEIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXBCkAHCSIwBCokBCg10aW1lc3RhbXAubHRl",
            "GnghaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+",
            "IHJ1bGVzLmx0ZT8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFs",
            "IHRvICVzJy5mb3JtYXQoW3J1bGVzLmx0ZV0pIDogJydIAFIDbHRlEmEKBmx0",
            "X25vdxgHIAEoCEJIwkhFCkMKEHRpbWVzdGFtcC5sdF9ub3caL3RoaXMgPiBu",
            "b3cgPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gbm93JyA6ICcnSABSBWx0",
            "Tm93EssHCgJndBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBC",
            "nAfCSJgHCn4KDHRpbWVzdGFtcC5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhh",
            "cyhydWxlcy5sdGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycK",
            "twEKD3RpbWVzdGFtcC5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMu",
            "bHQgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8",
            "PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBh",
            "bmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0p",
            "IDogJycKvwEKGXRpbWVzdGFtcC5ndF9sdF9leGNsdXNpdmUaoQFoYXMocnVs",
            "ZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9",
            "IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3QsIHJ1bGVzLmx0XSkgOiAnJwrHAQoQdGltZXN0YW1wLmd0X2x0ZRqyAWhh",
            "cyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhp",
            "cyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKzwEK",
            "GnRpbWVzdGFtcC5ndF9sdGVfZXhjbHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgcnVsZXMubHRlIDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMg",
            "JiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJydIAVICZ3QSmAgKA2d0ZRgGIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBC5wfCSOMHCowBCg10aW1l",
            "c3RhbXAuZ3RlGnshaGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgdGhpcyA8IHJ1bGVzLmd0ZT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycK",
            "xgEKEHRpbWVzdGFtcC5ndGVfbHQasQFoYXMocnVsZXMubHQpICYmIHJ1bGVz",
            "Lmx0ID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlz",
            "IDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9y",
            "IGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RlLCBydWxlcy5sdF0pIDogJycKzgEKGnRpbWVzdGFtcC5ndGVfbHRfZXhj",
            "bHVzaXZlGq8BaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0",
            "ZSAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIG9y",
            "IGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkg",
            "OiAnJwrWAQoRdGltZXN0YW1wLmd0ZV9sdGUawAFoYXMocnVsZXMubHRlKSAm",
            "JiBydWxlcy5sdGUgPj0gcnVsZXMuZ3RlICYmICh0aGlzID4gcnVsZXMubHRl",
            "IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0",
            "byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJycK3gEK",
            "G3RpbWVzdGFtcC5ndGVfbHRlX2V4Y2x1c2l2ZRq+AWhhcyhydWxlcy5sdGUp",
            "ICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHRlIDwgdGhp",
            "cyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0",
            "byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJydIAVID",
            "Z3RlEmQKBmd0X25vdxgIIAEoCEJLwkhICkYKEHRpbWVzdGFtcC5ndF9ub3ca",
            "MnRoaXMgPCBub3cgPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gbm93",
            "JyA6ICcnSAFSBWd0Tm93EsUBCgZ3aXRoaW4YCSABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb25CjAHCSIgBCoUBChB0aW1lc3RhbXAud2l0aGluGnF0",
            "aGlzIDwgbm93LXJ1bGVzLndpdGhpbiB8fCB0aGlzID4gbm93K3J1bGVzLndp",
            "dGhpbiA/ICd2YWx1ZSBtdXN0IGJlIHdpdGhpbiAlcyBvZiBub3cnLmZvcm1h",
            "dChbcnVsZXMud2l0aGluXSkgOiAnJ0gDUgZ3aXRoaW6IAQFCCwoJbGVzc190",
            "aGFuQg4KDGdyZWF0ZXJfdGhhbkIICgZfY29uc3RCCQoHX3dpdGhpbiqdAQoG",
            "SWdub3JlEhYKEklHTk9SRV9VTlNQRUNJRklFRBAAEhkKFUlHTk9SRV9JRl9V",
            "TlBPUFVMQVRFRBABEhsKF0lHTk9SRV9JRl9ERUZBVUxUX1ZBTFVFEAISEQoN",
            "SUdOT1JFX0FMV0FZUxADEhQKDElHTk9SRV9FTVBUWRABGgIIARIWCg5JR05P",
            "UkVfREVGQVVMVBACGgIIARoCEAEqbgoKS25vd25SZWdleBIbChdLTk9XTl9S",
            "RUdFWF9VTlNQRUNJRklFRBAAEiAKHEtOT1dOX1JFR0VYX0hUVFBfSEVBREVS",
            "X05BTUUQARIhCh1LTk9XTl9SRUdFWF9IVFRQX0hFQURFUl9WQUxVRRACOl8K",
            "B21lc3NhZ2USHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYhwkg",
            "ASgLMiAuYnVmLnZhbGlkYXRlLk1lc3NhZ2VDb25zdHJhaW50c1IHbWVzc2Fn",
            "ZYgBATpXCgVvbmVvZhIdLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnMY",
            "hwkgASgLMh4uYnVmLnZhbGlkYXRlLk9uZW9mQ29uc3RyYWludHNSBW9uZW9m",
            "iAEBOlcKBWZpZWxkEh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxiH",
            "CSABKAsyHi5idWYudmFsaWRhdGUuRmllbGRDb25zdHJhaW50c1IFZmllbGSI",
            "AQFCuwEKEGNvbS5idWYudmFsaWRhdGVCDVZhbGlkYXRlUHJvdG9QAVpHYnVm",
            "LmJ1aWxkL2dlbi9nby9idWZidWlsZC9wcm90b3ZhbGlkYXRlL3Byb3RvY29s",
            "YnVmZmVycy9nby9idWYvdmFsaWRhdGWiAgNCVliqAgxCdWYuVmFsaWRhdGXK",
            "AgxCdWZcVmFsaWRhdGXiAhhCdWZcVmFsaWRhdGVcR1BCTWV0YWRhdGHqAg1C",
            "dWY6OlZhbGlkYXRlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Buf.Validate.ExpressionReflection.Descriptor, global::Buf.Validate.Priv.PrivateReflection.Descriptor, global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Buf.Validate.Ignore), typeof(global::Buf.Validate.KnownRegex), }, new pb::Extension[] { ValidateExtensions.Message, ValidateExtensions.Oneof, ValidateExtensions.Field }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.MessageConstraints), global::Buf.Validate.MessageConstraints.Parser, new[]{ "Disabled", "Cel" }, new[]{ "Disabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.OneofConstraints), global::Buf.Validate.OneofConstraints.Parser, new[]{ "Required" }, new[]{ "Required" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FieldConstraints), global::Buf.Validate.FieldConstraints.Parser, new[]{ "Cel", "Required", "Ignore", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp", "Skipped", "IgnoreEmpty" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FloatRules), global::Buf.Validate.FloatRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.DoubleRules), global::Buf.Validate.DoubleRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Int32Rules), global::Buf.Validate.Int32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Int64Rules), global::Buf.Validate.Int64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.UInt32Rules), global::Buf.Validate.UInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.UInt64Rules), global::Buf.Validate.UInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SInt32Rules), global::Buf.Validate.SInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SInt64Rules), global::Buf.Validate.SInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Fixed32Rules), global::Buf.Validate.Fixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Fixed64Rules), global::Buf.Validate.Fixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SFixed32Rules), global::Buf.Validate.SFixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SFixed64Rules), global::Buf.Validate.SFixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.BoolRules), global::Buf.Validate.BoolRules.Parser, new[]{ "Const" }, new[]{ "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.StringRules), global::Buf.Validate.StringRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "Tuuid", "IpWithPrefixlen", "Ipv4WithPrefixlen", "Ipv6WithPrefixlen", "IpPrefix", "Ipv4Prefix", "Ipv6Prefix", "HostAndPort", "WellKnownRegex", "Strict" }, new[]{ "WellKnown", "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "Strict" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.BytesRules), global::Buf.Validate.BytesRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6" }, new[]{ "WellKnown", "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.EnumRules), global::Buf.Validate.EnumRules.Parser, new[]{ "Const", "DefinedOnly", "In", "NotIn" }, new[]{ "Const", "DefinedOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.RepeatedRules), global::Buf.Validate.RepeatedRules.Parser, new[]{ "MinItems", "MaxItems", "Unique", "Items" }, new[]{ "MinItems", "MaxItems", "Unique", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.MapRules), global::Buf.Validate.MapRules.Parser, new[]{ "MinPairs", "MaxPairs", "Keys", "Values" }, new[]{ "MinPairs", "MaxPairs", "Keys", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.AnyRules), global::Buf.Validate.AnyRules.Parser, new[]{ "In", "NotIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.DurationRules), global::Buf.Validate.DurationRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, new[]{ "LessThan", "GreaterThan", "Const" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.TimestampRules), global::Buf.Validate.TimestampRules.Parser, new[]{ "Const", "Lt", "Lte", "LtNow", "Gt", "Gte", "GtNow", "Within" }, new[]{ "LessThan", "GreaterThan", "Const", "Within" }, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of buf/validate/validate.proto</summary>
  public static partial class ValidateExtensions {
    /// <summary>
    /// Rules specify the validations to be performed on this message. By default,
    /// no validation is performed against a message.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, global::Buf.Validate.MessageConstraints> Message =
      new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, global::Buf.Validate.MessageConstraints>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.MessageConstraints.Parser));
    /// <summary>
    /// Rules specify the validations to be performed on this oneof. By default,
    /// no validation is performed against a oneof.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, global::Buf.Validate.OneofConstraints> Oneof =
      new pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, global::Buf.Validate.OneofConstraints>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.OneofConstraints.Parser));
    /// <summary>
    /// Rules specify the validations to be performed on this field. By default,
    /// no validation is performed against a field.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.FieldConstraints> Field =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.FieldConstraints>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.FieldConstraints.Parser));
  }

  #region Enums
  /// <summary>
  /// Specifies how FieldConstraints.ignore behaves. See the documentation for
  /// FieldConstraints.required for definitions of "populated" and "nullable".
  /// </summary>
  public enum Ignore {
    /// <summary>
    /// Validation is only skipped if it's an unpopulated nullable fields.
    ///
    /// ```proto
    /// syntax="proto3";
    ///
    /// message Request {
    ///   // The uri rule applies to any value, including the empty string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true
    ///   ];
    ///
    ///   // The uri rule only applies if the field is set, including if it's
    ///   // set to the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true
    ///   ];
    ///
    ///   // The min_items rule always applies, even if the list is empty.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3
    ///   ];
    ///
    ///   // The custom CEL rule applies only if the field is set, including if
    ///   // it's the "zero" value of that message.
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */}
    ///   ];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Validation is skipped if the field is unpopulated. This rule is redundant
    /// if the field is already nullable. This value is equivalent behavior to the
    /// deprecated ignore_empty rule.
    ///
    /// ```proto
    /// syntax="proto3
    ///
    /// message Request {
    ///   // The uri rule applies only if the value is not the empty string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    ///   // case: the uri rule only applies if the field is set, including if
    ///   // it's set to the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // The min_items rule only applies if the list has at least one item.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    ///   // case: the custom CEL rule applies only if the field is set, including
    ///   // if it's the "zero" value of that message.
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */},
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_IF_UNPOPULATED")] IfUnpopulated = 1,
    /// <summary>
    /// Validation is skipped if the field is unpopulated or if it is a nullable
    /// field populated with its default value. This is typically the zero or
    /// empty value, but proto2 scalars support custom defaults. For messages, the
    /// default is a non-null message with all its fields unpopulated.
    ///
    /// ```proto
    /// syntax="proto3
    ///
    /// message Request {
    ///   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    ///   // this case; the uri rule applies only if the value is not the empty
    ///   // string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // The uri rule only applies if the field is set to a value other than
    ///   // the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    ///   // this case; the min_items rule only applies if the list has at least
    ///   // one item.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // The custom CEL rule only applies if the field is set to a value other
    ///   // than an empty message (i.e., fields are unpopulated).
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */},
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    /// }
    /// ```
    ///
    /// This rule is affected by proto2 custom default values:
    ///
    /// ```proto
    /// syntax="proto2";
    ///
    /// message Request {
    ///   // The gt rule only applies if the field is set and it's value is not
    ///   the default (i.e., not -42). The rule even applies if the field is set
    ///   to zero since the default value differs.
    ///   optional int32 value = 1 [
    ///     default = -42,
    ///     (buf.validate.field).int32.gt = 0,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    /// }
    /// </summary>
    [pbr::OriginalName("IGNORE_IF_DEFAULT_VALUE")] IfDefaultValue = 2,
    /// <summary>
    /// The validation rules of this field will be skipped and not evaluated. This
    /// is useful for situations that necessitate turning off the rules of a field
    /// containing a message that may not make sense in the current context, or to
    /// temporarily disable constraints during development.
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field's rules will always be ignored, including any validation's
    ///   // on value's fields.
    ///   MyOtherMessage value = 1 [
    ///     (buf.validate.field).ignore = IGNORE_ALWAYS];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_ALWAYS")] Always = 3,
    /// <summary>
    /// Deprecated: Use IGNORE_IF_UNPOPULATED instead. TODO: Remove this value pre-v1.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [pbr::OriginalName("IGNORE_EMPTY", PreferredAlias = false)] Empty = 1,
    /// <summary>
    /// Deprecated: Use IGNORE_IF_DEFAULT_VALUE. TODO: Remove this value pre-v1.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [pbr::OriginalName("IGNORE_DEFAULT", PreferredAlias = false)] Default = 2,
  }

  /// <summary>
  /// WellKnownRegex contain some well-known patterns.
  /// </summary>
  public enum KnownRegex {
    [pbr::OriginalName("KNOWN_REGEX_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// HTTP header name as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2).
    /// </summary>
    [pbr::OriginalName("KNOWN_REGEX_HTTP_HEADER_NAME")] HttpHeaderName = 1,
    /// <summary>
    /// HTTP header value as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2.4).
    /// </summary>
    [pbr::OriginalName("KNOWN_REGEX_HTTP_HEADER_VALUE")] HttpHeaderValue = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// MessageConstraints represents validation rules that are applied to the entire message.
  /// It includes disabling options and a list of Constraint messages representing Common Expression Language (CEL) validation rules.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MessageConstraints : pb::IMessage<MessageConstraints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessageConstraints> _parser = new pb::MessageParser<MessageConstraints>(() => new MessageConstraints());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MessageConstraints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageConstraints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageConstraints(MessageConstraints other) : this() {
      _hasBits0 = other._hasBits0;
      disabled_ = other.disabled_;
      cel_ = other.cel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageConstraints Clone() {
      return new MessageConstraints(this);
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 1;
    private readonly static bool DisabledDefaultValue = false;

    private bool disabled_;
    /// <summary>
    /// `disabled` is a boolean flag that, when set to true, nullifies any validation rules for this message.
    /// This includes any fields within the message that would otherwise support validation.
    ///
    /// ```proto
    /// message MyMessage {
    ///   // validation will be bypassed for this message
    ///   option (buf.validate.message).disabled = true;
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disabled {
      get { if ((_hasBits0 & 1) != 0) { return disabled_; } else { return DisabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        disabled_ = value;
      }
    }
    /// <summary>Gets whether the "disabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cel" field.</summary>
    public const int CelFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Buf.Validate.Constraint> _repeated_cel_codec
        = pb::FieldCodec.ForMessage(26, global::Buf.Validate.Constraint.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Constraint> cel_ = new pbc::RepeatedField<global::Buf.Validate.Constraint>();
    /// <summary>
    /// `cel` is a repeated field of type Constraint. Each Constraint specifies a validation rule to be applied to this message.
    /// These constraints are written in Common Expression Language (CEL) syntax. For more information on
    /// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `foo` must be greater than 42.
    ///   option (buf.validate.message).cel = {
    ///     id: "my_message.value",
    ///     message: "value must be greater than 42",
    ///     expression: "this.foo > 42",
    ///   };
    ///   optional int32 foo = 1;
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Constraint> Cel {
      get { return cel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MessageConstraints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MessageConstraints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Disabled != other.Disabled) return false;
      if(!cel_.Equals(other.cel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDisabled) hash ^= Disabled.GetHashCode();
      hash ^= cel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDisabled) {
        output.WriteRawTag(8);
        output.WriteBool(Disabled);
      }
      cel_.WriteTo(output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDisabled) {
        output.WriteRawTag(8);
        output.WriteBool(Disabled);
      }
      cel_.WriteTo(ref output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDisabled) {
        size += 1 + 1;
      }
      size += cel_.CalculateSize(_repeated_cel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MessageConstraints other) {
      if (other == null) {
        return;
      }
      if (other.HasDisabled) {
        Disabled = other.Disabled;
      }
      cel_.Add(other.cel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Disabled = input.ReadBool();
            break;
          }
          case 26: {
            cel_.AddEntriesFrom(input, _repeated_cel_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Disabled = input.ReadBool();
            break;
          }
          case 26: {
            cel_.AddEntriesFrom(ref input, _repeated_cel_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The `OneofConstraints` message type enables you to manage constraints for
  /// oneof fields in your protobuf messages.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OneofConstraints : pb::IMessage<OneofConstraints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OneofConstraints> _parser = new pb::MessageParser<OneofConstraints>(() => new OneofConstraints());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OneofConstraints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofConstraints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofConstraints(OneofConstraints other) : this() {
      _hasBits0 = other._hasBits0;
      required_ = other.required_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofConstraints Clone() {
      return new OneofConstraints(this);
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 1;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// If `required` is true, exactly one field of the oneof must be present. A
    /// validation error is returned if no fields in the oneof are present. The
    /// field itself may still be a default value; further constraints
    /// should be placed on the fields themselves to ensure they are valid values,
    /// such as `min_len` or `gt`.
    ///
    /// ```proto
    /// message MyMessage {
    ///   oneof value {
    ///     // Either `a` or `b` must be set. If `a` is set, it must also be
    ///     // non-empty; whereas if `b` is set, it can still be an empty string.
    ///     option (buf.validate.oneof).required = true;
    ///     string a = 1 [(buf.validate.field).string.min_len = 1];
    ///     string b = 2;
    ///   }
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OneofConstraints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OneofConstraints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Required != other.Required) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequired) hash ^= Required.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequired) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OneofConstraints other) {
      if (other == null) {
        return;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FieldConstraints encapsulates the rules for each type of field. Depending on
  /// the field, the correct set should be used to ensure proper validations.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FieldConstraints : pb::IMessage<FieldConstraints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldConstraints> _parser = new pb::MessageParser<FieldConstraints>(() => new FieldConstraints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FieldConstraints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldConstraints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldConstraints(FieldConstraints other) : this() {
      cel_ = other.cel_.Clone();
      required_ = other.required_;
      ignore_ = other.ignore_;
      skipped_ = other.skipped_;
      ignoreEmpty_ = other.ignoreEmpty_;
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          Float = other.Float.Clone();
          break;
        case TypeOneofCase.Double:
          Double = other.Double.Clone();
          break;
        case TypeOneofCase.Int32:
          Int32 = other.Int32.Clone();
          break;
        case TypeOneofCase.Int64:
          Int64 = other.Int64.Clone();
          break;
        case TypeOneofCase.Uint32:
          Uint32 = other.Uint32.Clone();
          break;
        case TypeOneofCase.Uint64:
          Uint64 = other.Uint64.Clone();
          break;
        case TypeOneofCase.Sint32:
          Sint32 = other.Sint32.Clone();
          break;
        case TypeOneofCase.Sint64:
          Sint64 = other.Sint64.Clone();
          break;
        case TypeOneofCase.Fixed32:
          Fixed32 = other.Fixed32.Clone();
          break;
        case TypeOneofCase.Fixed64:
          Fixed64 = other.Fixed64.Clone();
          break;
        case TypeOneofCase.Sfixed32:
          Sfixed32 = other.Sfixed32.Clone();
          break;
        case TypeOneofCase.Sfixed64:
          Sfixed64 = other.Sfixed64.Clone();
          break;
        case TypeOneofCase.Bool:
          Bool = other.Bool.Clone();
          break;
        case TypeOneofCase.String:
          String = other.String.Clone();
          break;
        case TypeOneofCase.Bytes:
          Bytes = other.Bytes.Clone();
          break;
        case TypeOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
        case TypeOneofCase.Repeated:
          Repeated = other.Repeated.Clone();
          break;
        case TypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Duration:
          Duration = other.Duration.Clone();
          break;
        case TypeOneofCase.Timestamp:
          Timestamp = other.Timestamp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldConstraints Clone() {
      return new FieldConstraints(this);
    }

    /// <summary>Field number for the "cel" field.</summary>
    public const int CelFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Buf.Validate.Constraint> _repeated_cel_codec
        = pb::FieldCodec.ForMessage(186, global::Buf.Validate.Constraint.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Constraint> cel_ = new pbc::RepeatedField<global::Buf.Validate.Constraint>();
    /// <summary>
    /// `cel` is a repeated field used to represent a textual expression
    /// in the Common Expression Language (CEL) syntax. For more information on
    /// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `value` must be greater than 42.
    ///   optional int32 value = 1 [(buf.validate.field).cel = {
    ///     id: "my_message.value",
    ///     message: "value must be greater than 42",
    ///     expression: "this > 42",
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Constraint> Cel {
      get { return cel_; }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 25;
    private bool required_;
    /// <summary>
    /// If `required` is true, the field must be populated. A populated field can be
    /// described as "serialized in the wire format," which includes:
    ///
    /// - the following "nullable" fields must be explicitly set to be considered populated:
    ///   - singular message fields (whose fields may be unpopulated/default values)
    ///   - member fields of a oneof (may be their default value)
    ///   - proto3 optional fields (may be their default value)
    ///   - proto2 scalar fields (both optional and required)
    /// - proto3 scalar fields must be non-zero to be considered populated
    /// - repeated and map fields must be non-empty to be considered populated
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `value` must be set to a non-null value.
    ///   optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "ignore" field.</summary>
    public const int IgnoreFieldNumber = 27;
    private global::Buf.Validate.Ignore ignore_ = global::Buf.Validate.Ignore.Unspecified;
    /// <summary>
    /// Skip validation on the field if its value matches the specified criteria.
    /// See Ignore enum for details.
    ///
    /// ```proto
    /// message UpdateRequest {
    ///   // The uri rule only applies if the field is populated and not an empty
    ///   // string.
    ///   optional string url = 1 [
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
    ///     (buf.validate.field).string.uri = true,
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Ignore Ignore {
      get { return ignore_; }
      set {
        ignore_ = value;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 1;
    /// <summary>
    /// Scalar Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FloatRules Float {
      get { return typeCase_ == TypeOneofCase.Float ? (global::Buf.Validate.FloatRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Float;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.DoubleRules Double {
      get { return typeCase_ == TypeOneofCase.Double ? (global::Buf.Validate.DoubleRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Double;
      }
    }

    /// <summary>Field number for the "int32" field.</summary>
    public const int Int32FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Int32Rules Int32 {
      get { return typeCase_ == TypeOneofCase.Int32 ? (global::Buf.Validate.Int32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int32;
      }
    }

    /// <summary>Field number for the "int64" field.</summary>
    public const int Int64FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Int64Rules Int64 {
      get { return typeCase_ == TypeOneofCase.Int64 ? (global::Buf.Validate.Int64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64;
      }
    }

    /// <summary>Field number for the "uint32" field.</summary>
    public const int Uint32FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.UInt32Rules Uint32 {
      get { return typeCase_ == TypeOneofCase.Uint32 ? (global::Buf.Validate.UInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint32;
      }
    }

    /// <summary>Field number for the "uint64" field.</summary>
    public const int Uint64FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.UInt64Rules Uint64 {
      get { return typeCase_ == TypeOneofCase.Uint64 ? (global::Buf.Validate.UInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint64;
      }
    }

    /// <summary>Field number for the "sint32" field.</summary>
    public const int Sint32FieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SInt32Rules Sint32 {
      get { return typeCase_ == TypeOneofCase.Sint32 ? (global::Buf.Validate.SInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint32;
      }
    }

    /// <summary>Field number for the "sint64" field.</summary>
    public const int Sint64FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SInt64Rules Sint64 {
      get { return typeCase_ == TypeOneofCase.Sint64 ? (global::Buf.Validate.SInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint64;
      }
    }

    /// <summary>Field number for the "fixed32" field.</summary>
    public const int Fixed32FieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Fixed32Rules Fixed32 {
      get { return typeCase_ == TypeOneofCase.Fixed32 ? (global::Buf.Validate.Fixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed32;
      }
    }

    /// <summary>Field number for the "fixed64" field.</summary>
    public const int Fixed64FieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Fixed64Rules Fixed64 {
      get { return typeCase_ == TypeOneofCase.Fixed64 ? (global::Buf.Validate.Fixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed64;
      }
    }

    /// <summary>Field number for the "sfixed32" field.</summary>
    public const int Sfixed32FieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SFixed32Rules Sfixed32 {
      get { return typeCase_ == TypeOneofCase.Sfixed32 ? (global::Buf.Validate.SFixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed32;
      }
    }

    /// <summary>Field number for the "sfixed64" field.</summary>
    public const int Sfixed64FieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SFixed64Rules Sfixed64 {
      get { return typeCase_ == TypeOneofCase.Sfixed64 ? (global::Buf.Validate.SFixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed64;
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.BoolRules Bool {
      get { return typeCase_ == TypeOneofCase.Bool ? (global::Buf.Validate.BoolRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.StringRules String {
      get { return typeCase_ == TypeOneofCase.String ? (global::Buf.Validate.StringRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.String;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.BytesRules Bytes {
      get { return typeCase_ == TypeOneofCase.Bytes ? (global::Buf.Validate.BytesRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 16;
    /// <summary>
    /// Complex Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.EnumRules Enum {
      get { return typeCase_ == TypeOneofCase.Enum ? (global::Buf.Validate.EnumRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.RepeatedRules Repeated {
      get { return typeCase_ == TypeOneofCase.Repeated ? (global::Buf.Validate.RepeatedRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Repeated;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.MapRules Map {
      get { return typeCase_ == TypeOneofCase.Map ? (global::Buf.Validate.MapRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 20;
    /// <summary>
    /// Well-Known Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.AnyRules Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Buf.Validate.AnyRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.DurationRules Duration {
      get { return typeCase_ == TypeOneofCase.Duration ? (global::Buf.Validate.DurationRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Duration;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.TimestampRules Timestamp {
      get { return typeCase_ == TypeOneofCase.Timestamp ? (global::Buf.Validate.TimestampRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Timestamp;
      }
    }

    /// <summary>Field number for the "skipped" field.</summary>
    public const int SkippedFieldNumber = 24;
    private bool skipped_;
    /// <summary>
    /// DEPRECATED: use ignore=IGNORE_ALWAYS instead. TODO: remove this field pre-v1.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Skipped {
      get { return skipped_; }
      set {
        skipped_ = value;
      }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 26;
    private bool ignoreEmpty_;
    /// <summary>
    /// DEPRECATED: use ignore=IGNORE_IF_UNPOPULATED instead. TODO: remove this field pre-v1.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { return ignoreEmpty_; }
      set {
        ignoreEmpty_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Float = 1,
      Double = 2,
      Int32 = 3,
      Int64 = 4,
      Uint32 = 5,
      Uint64 = 6,
      Sint32 = 7,
      Sint64 = 8,
      Fixed32 = 9,
      Fixed64 = 10,
      Sfixed32 = 11,
      Sfixed64 = 12,
      Bool = 13,
      String = 14,
      Bytes = 15,
      Enum = 16,
      Repeated = 18,
      Map = 19,
      Any = 20,
      Duration = 21,
      Timestamp = 22,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FieldConstraints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FieldConstraints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cel_.Equals(other.cel_)) return false;
      if (Required != other.Required) return false;
      if (Ignore != other.Ignore) return false;
      if (!object.Equals(Float, other.Float)) return false;
      if (!object.Equals(Double, other.Double)) return false;
      if (!object.Equals(Int32, other.Int32)) return false;
      if (!object.Equals(Int64, other.Int64)) return false;
      if (!object.Equals(Uint32, other.Uint32)) return false;
      if (!object.Equals(Uint64, other.Uint64)) return false;
      if (!object.Equals(Sint32, other.Sint32)) return false;
      if (!object.Equals(Sint64, other.Sint64)) return false;
      if (!object.Equals(Fixed32, other.Fixed32)) return false;
      if (!object.Equals(Fixed64, other.Fixed64)) return false;
      if (!object.Equals(Sfixed32, other.Sfixed32)) return false;
      if (!object.Equals(Sfixed64, other.Sfixed64)) return false;
      if (!object.Equals(Bool, other.Bool)) return false;
      if (!object.Equals(String, other.String)) return false;
      if (!object.Equals(Bytes, other.Bytes)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(Repeated, other.Repeated)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Skipped != other.Skipped) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cel_.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (Ignore != global::Buf.Validate.Ignore.Unspecified) hash ^= Ignore.GetHashCode();
      if (typeCase_ == TypeOneofCase.Float) hash ^= Float.GetHashCode();
      if (typeCase_ == TypeOneofCase.Double) hash ^= Double.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int32) hash ^= Int32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int64) hash ^= Int64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint32) hash ^= Uint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint64) hash ^= Uint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint32) hash ^= Sint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint64) hash ^= Sint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed32) hash ^= Fixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed64) hash ^= Fixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed32) hash ^= Sfixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed64) hash ^= Sfixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (typeCase_ == TypeOneofCase.String) hash ^= String.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (typeCase_ == TypeOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (typeCase_ == TypeOneofCase.Repeated) hash ^= Repeated.GetHashCode();
      if (typeCase_ == TypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Duration) hash ^= Duration.GetHashCode();
      if (typeCase_ == TypeOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      if (Skipped != false) hash ^= Skipped.GetHashCode();
      if (IgnoreEmpty != false) hash ^= IgnoreEmpty.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      cel_.WriteTo(output, _repeated_cel_codec);
      if (Skipped != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Skipped);
      }
      if (Required != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Required);
      }
      if (IgnoreEmpty != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IgnoreEmpty);
      }
      if (Ignore != global::Buf.Validate.Ignore.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Ignore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      cel_.WriteTo(ref output, _repeated_cel_codec);
      if (Skipped != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Skipped);
      }
      if (Required != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Required);
      }
      if (IgnoreEmpty != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IgnoreEmpty);
      }
      if (Ignore != global::Buf.Validate.Ignore.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Ignore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += cel_.CalculateSize(_repeated_cel_codec);
      if (Required != false) {
        size += 2 + 1;
      }
      if (Ignore != global::Buf.Validate.Ignore.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ignore);
      }
      if (typeCase_ == TypeOneofCase.Float) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Skipped != false) {
        size += 2 + 1;
      }
      if (IgnoreEmpty != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FieldConstraints other) {
      if (other == null) {
        return;
      }
      cel_.Add(other.cel_);
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.Ignore != global::Buf.Validate.Ignore.Unspecified) {
        Ignore = other.Ignore;
      }
      if (other.Skipped != false) {
        Skipped = other.Skipped;
      }
      if (other.IgnoreEmpty != false) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          if (Float == null) {
            Float = new global::Buf.Validate.FloatRules();
          }
          Float.MergeFrom(other.Float);
          break;
        case TypeOneofCase.Double:
          if (Double == null) {
            Double = new global::Buf.Validate.DoubleRules();
          }
          Double.MergeFrom(other.Double);
          break;
        case TypeOneofCase.Int32:
          if (Int32 == null) {
            Int32 = new global::Buf.Validate.Int32Rules();
          }
          Int32.MergeFrom(other.Int32);
          break;
        case TypeOneofCase.Int64:
          if (Int64 == null) {
            Int64 = new global::Buf.Validate.Int64Rules();
          }
          Int64.MergeFrom(other.Int64);
          break;
        case TypeOneofCase.Uint32:
          if (Uint32 == null) {
            Uint32 = new global::Buf.Validate.UInt32Rules();
          }
          Uint32.MergeFrom(other.Uint32);
          break;
        case TypeOneofCase.Uint64:
          if (Uint64 == null) {
            Uint64 = new global::Buf.Validate.UInt64Rules();
          }
          Uint64.MergeFrom(other.Uint64);
          break;
        case TypeOneofCase.Sint32:
          if (Sint32 == null) {
            Sint32 = new global::Buf.Validate.SInt32Rules();
          }
          Sint32.MergeFrom(other.Sint32);
          break;
        case TypeOneofCase.Sint64:
          if (Sint64 == null) {
            Sint64 = new global::Buf.Validate.SInt64Rules();
          }
          Sint64.MergeFrom(other.Sint64);
          break;
        case TypeOneofCase.Fixed32:
          if (Fixed32 == null) {
            Fixed32 = new global::Buf.Validate.Fixed32Rules();
          }
          Fixed32.MergeFrom(other.Fixed32);
          break;
        case TypeOneofCase.Fixed64:
          if (Fixed64 == null) {
            Fixed64 = new global::Buf.Validate.Fixed64Rules();
          }
          Fixed64.MergeFrom(other.Fixed64);
          break;
        case TypeOneofCase.Sfixed32:
          if (Sfixed32 == null) {
            Sfixed32 = new global::Buf.Validate.SFixed32Rules();
          }
          Sfixed32.MergeFrom(other.Sfixed32);
          break;
        case TypeOneofCase.Sfixed64:
          if (Sfixed64 == null) {
            Sfixed64 = new global::Buf.Validate.SFixed64Rules();
          }
          Sfixed64.MergeFrom(other.Sfixed64);
          break;
        case TypeOneofCase.Bool:
          if (Bool == null) {
            Bool = new global::Buf.Validate.BoolRules();
          }
          Bool.MergeFrom(other.Bool);
          break;
        case TypeOneofCase.String:
          if (String == null) {
            String = new global::Buf.Validate.StringRules();
          }
          String.MergeFrom(other.String);
          break;
        case TypeOneofCase.Bytes:
          if (Bytes == null) {
            Bytes = new global::Buf.Validate.BytesRules();
          }
          Bytes.MergeFrom(other.Bytes);
          break;
        case TypeOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Buf.Validate.EnumRules();
          }
          Enum.MergeFrom(other.Enum);
          break;
        case TypeOneofCase.Repeated:
          if (Repeated == null) {
            Repeated = new global::Buf.Validate.RepeatedRules();
          }
          Repeated.MergeFrom(other.Repeated);
          break;
        case TypeOneofCase.Map:
          if (Map == null) {
            Map = new global::Buf.Validate.MapRules();
          }
          Map.MergeFrom(other.Map);
          break;
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Buf.Validate.AnyRules();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Duration:
          if (Duration == null) {
            Duration = new global::Buf.Validate.DurationRules();
          }
          Duration.MergeFrom(other.Duration);
          break;
        case TypeOneofCase.Timestamp:
          if (Timestamp == null) {
            Timestamp = new global::Buf.Validate.TimestampRules();
          }
          Timestamp.MergeFrom(other.Timestamp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Buf.Validate.FloatRules subBuilder = new global::Buf.Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Buf.Validate.DoubleRules subBuilder = new global::Buf.Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Buf.Validate.Int32Rules subBuilder = new global::Buf.Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Buf.Validate.Int64Rules subBuilder = new global::Buf.Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Buf.Validate.UInt32Rules subBuilder = new global::Buf.Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Buf.Validate.UInt64Rules subBuilder = new global::Buf.Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Buf.Validate.SInt32Rules subBuilder = new global::Buf.Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Buf.Validate.SInt64Rules subBuilder = new global::Buf.Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Buf.Validate.Fixed32Rules subBuilder = new global::Buf.Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Buf.Validate.Fixed64Rules subBuilder = new global::Buf.Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Buf.Validate.SFixed32Rules subBuilder = new global::Buf.Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Buf.Validate.SFixed64Rules subBuilder = new global::Buf.Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Buf.Validate.BoolRules subBuilder = new global::Buf.Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Buf.Validate.StringRules subBuilder = new global::Buf.Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Buf.Validate.BytesRules subBuilder = new global::Buf.Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Buf.Validate.EnumRules subBuilder = new global::Buf.Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 146: {
            global::Buf.Validate.RepeatedRules subBuilder = new global::Buf.Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Buf.Validate.MapRules subBuilder = new global::Buf.Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Buf.Validate.AnyRules subBuilder = new global::Buf.Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Buf.Validate.DurationRules subBuilder = new global::Buf.Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Buf.Validate.TimestampRules subBuilder = new global::Buf.Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
          case 186: {
            cel_.AddEntriesFrom(input, _repeated_cel_codec);
            break;
          }
          case 192: {
            Skipped = input.ReadBool();
            break;
          }
          case 200: {
            Required = input.ReadBool();
            break;
          }
          case 208: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
          case 216: {
            Ignore = (global::Buf.Validate.Ignore) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Buf.Validate.FloatRules subBuilder = new global::Buf.Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Buf.Validate.DoubleRules subBuilder = new global::Buf.Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Buf.Validate.Int32Rules subBuilder = new global::Buf.Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Buf.Validate.Int64Rules subBuilder = new global::Buf.Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Buf.Validate.UInt32Rules subBuilder = new global::Buf.Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Buf.Validate.UInt64Rules subBuilder = new global::Buf.Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Buf.Validate.SInt32Rules subBuilder = new global::Buf.Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Buf.Validate.SInt64Rules subBuilder = new global::Buf.Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Buf.Validate.Fixed32Rules subBuilder = new global::Buf.Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Buf.Validate.Fixed64Rules subBuilder = new global::Buf.Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Buf.Validate.SFixed32Rules subBuilder = new global::Buf.Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Buf.Validate.SFixed64Rules subBuilder = new global::Buf.Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Buf.Validate.BoolRules subBuilder = new global::Buf.Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Buf.Validate.StringRules subBuilder = new global::Buf.Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Buf.Validate.BytesRules subBuilder = new global::Buf.Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Buf.Validate.EnumRules subBuilder = new global::Buf.Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 146: {
            global::Buf.Validate.RepeatedRules subBuilder = new global::Buf.Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Buf.Validate.MapRules subBuilder = new global::Buf.Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Buf.Validate.AnyRules subBuilder = new global::Buf.Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Buf.Validate.DurationRules subBuilder = new global::Buf.Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Buf.Validate.TimestampRules subBuilder = new global::Buf.Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
          case 186: {
            cel_.AddEntriesFrom(ref input, _repeated_cel_codec);
            break;
          }
          case 192: {
            Skipped = input.ReadBool();
            break;
          }
          case 200: {
            Required = input.ReadBool();
            break;
          }
          case 208: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
          case 216: {
            Ignore = (global::Buf.Validate.Ignore) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FloatRules describes the constraints applied to `float` values. These
  /// rules may also be applied to the `google.protobuf.FloatValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FloatRules : pb::IMessage<FloatRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FloatRules> _parser = new pb::MessageParser<FloatRules>(() => new FloatRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FloatRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules(FloatRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      finite_ = other.finite_;
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules Clone() {
      return new FloatRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static float ConstDefaultValue = 0F;

    private float const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must equal 42.0
    ///   float value = 1 [(buf.validate.field).float.const = 42.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be less than 10.0
    ///   float value = 1 [(buf.validate.field).float.lt = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lt {
      get { return HasLt ? (float) lessThan_ : 0F; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be less than or equal to 10.0
    ///   float value = 1 [(buf.validate.field).float.lte = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lte {
      get { return HasLte ? (float) lessThan_ : 0F; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be greater than 5.0 [float.gt]
    ///   float value = 1 [(buf.validate.field).float.gt = 5.0];
    ///
    ///   // value must be greater than 5 and less than 10.0 [float.gt_lt]
    ///   float other_value = 2 [(buf.validate.field).float = { gt: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than 10 or less than 5.0 [float.gt_lt_exclusive]
    ///   float another_value = 3 [(buf.validate.field).float = { gt: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gt {
      get { return HasGt ? (float) greaterThan_ : 0F; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be greater than or equal to 5.0 [float.gte]
    ///   float value = 1 [(buf.validate.field).float.gte = 5.0];
    ///
    ///   // value must be greater than or equal to 5.0 and less than 10.0 [float.gte_lt]
    ///   float other_value = 2 [(buf.validate.field).float = { gte: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than or equal to 10.0 or less than 5.0 [float.gte_lt_exclusive]
    ///   float another_value = 3 [(buf.validate.field).float = { gte: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gte {
      get { return HasGte ? (float) greaterThan_ : 0F; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_in_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> in_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be in list [1.0, 2.0, 3.0]
    ///   repeated float value = 1 (buf.validate.field).float = { in: [1.0, 2.0, 3.0] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_notIn_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> notIn_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// `in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must not be in list [1.0, 2.0, 3.0]
    ///   repeated float value = 1 (buf.validate.field).float = { not_in: [1.0, 2.0, 3.0] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "finite" field.</summary>
    public const int FiniteFieldNumber = 8;
    private bool finite_;
    /// <summary>
    /// `finite` requires the field value to be finite. If the field value is
    /// infinite or NaN, an error message is generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Finite {
      get { return finite_; }
      set {
        finite_ = value;
      }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FloatRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FloatRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Finite != other.Finite) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (Finite != false) hash ^= Finite.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (Finite != false) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (Finite != false) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (Finite != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FloatRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.Finite != false) {
        Finite = other.Finite;
      }
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DoubleRules describes the constraints applied to `double` values. These
  /// rules may also be applied to the `google.protobuf.DoubleValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DoubleRules : pb::IMessage<DoubleRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DoubleRules> _parser = new pb::MessageParser<DoubleRules>(() => new DoubleRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DoubleRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules(DoubleRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      finite_ = other.finite_;
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules Clone() {
      return new DoubleRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static double ConstDefaultValue = 0D;

    private double const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must equal 42.0
    ///   double value = 1 [(buf.validate.field).double.const = 42.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be less than 10.0
    ///   double value = 1 [(buf.validate.field).double.lt = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lt {
      get { return HasLt ? (double) lessThan_ : 0D; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified value
    /// (field &lt;= value). If the field value is greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be less than or equal to 10.0
    ///   double value = 1 [(buf.validate.field).double.lte = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lte {
      get { return HasLte ? (double) lessThan_ : 0D; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or `lte`,
    /// the range is reversed, and the field value must be outside the specified
    /// range. If the field value doesn't meet the required conditions, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be greater than 5.0 [double.gt]
    ///   double value = 1 [(buf.validate.field).double.gt = 5.0];
    ///
    ///   // value must be greater than 5 and less than 10.0 [double.gt_lt]
    ///   double other_value = 2 [(buf.validate.field).double = { gt: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than 10 or less than 5.0 [double.gt_lt_exclusive]
    ///   double another_value = 3 [(buf.validate.field).double = { gt: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gt {
      get { return HasGt ? (double) greaterThan_ : 0D; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be greater than or equal to 5.0 [double.gte]
    ///   double value = 1 [(buf.validate.field).double.gte = 5.0];
    ///
    ///   // value must be greater than or equal to 5.0 and less than 10.0 [double.gte_lt]
    ///   double other_value = 2 [(buf.validate.field).double = { gte: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than or equal to 10.0 or less than 5.0 [double.gte_lt_exclusive]
    ///   double another_value = 3 [(buf.validate.field).double = { gte: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gte {
      get { return HasGte ? (double) greaterThan_ : 0D; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_in_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> in_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be in list [1.0, 2.0, 3.0]
    ///   repeated double value = 1 (buf.validate.field).double = { in: [1.0, 2.0, 3.0] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_notIn_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> notIn_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must not be in list [1.0, 2.0, 3.0]
    ///   repeated double value = 1 (buf.validate.field).double = { not_in: [1.0, 2.0, 3.0] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "finite" field.</summary>
    public const int FiniteFieldNumber = 8;
    private bool finite_;
    /// <summary>
    /// `finite` requires the field value to be finite. If the field value is
    /// infinite or NaN, an error message is generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Finite {
      get { return finite_; }
      set {
        finite_ = value;
      }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DoubleRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DoubleRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Finite != other.Finite) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (Finite != false) hash ^= Finite.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (Finite != false) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (Finite != false) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (Finite != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DoubleRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.Finite != false) {
        Finite = other.Finite;
      }
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Int32Rules describes the constraints applied to `int32` values. These
  /// rules may also be applied to the `google.protobuf.Int32Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Int32Rules : pb::IMessage<Int32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int32Rules> _parser = new pb::MessageParser<Int32Rules>(() => new Int32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules(Int32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules Clone() {
      return new Int32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must equal 42
    ///   int32 value = 1 [(buf.validate.field).int32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be less than 10
    ///   int32 value = 1 [(buf.validate.field).int32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be less than or equal to 10
    ///   int32 value = 1 [(buf.validate.field).int32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be greater than 5 [int32.gt]
    ///   int32 value = 1 [(buf.validate.field).int32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [int32.gt_lt]
    ///   int32 other_value = 2 [(buf.validate.field).int32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [int32.gt_lt_exclusive]
    ///   int32 another_value = 3 [(buf.validate.field).int32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified value
    /// (exclusive). If the value of `gte` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be greater than or equal to 5 [int32.gte]
    ///   int32 value = 1 [(buf.validate.field).int32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [int32.gte_lt]
    ///   int32 other_value = 2 [(buf.validate.field).int32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [int32.gte_lt_exclusive]
    ///   int32 another_value = 3 [(buf.validate.field).int32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated int32 value = 1 (buf.validate.field).int32 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated int32 value = 1 (buf.validate.field).int32 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Int64Rules describes the constraints applied to `int64` values. These
  /// rules may also be applied to the `google.protobuf.Int64Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Int64Rules : pb::IMessage<Int64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int64Rules> _parser = new pb::MessageParser<Int64Rules>(() => new Int64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules(Int64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules Clone() {
      return new Int64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must equal 42
    ///   int64 value = 1 [(buf.validate.field).int64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be less than 10
    ///   int64 value = 1 [(buf.validate.field).int64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be less than or equal to 10
    ///   int64 value = 1 [(buf.validate.field).int64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be greater than 5 [int64.gt]
    ///   int64 value = 1 [(buf.validate.field).int64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [int64.gt_lt]
    ///   int64 other_value = 2 [(buf.validate.field).int64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [int64.gt_lt_exclusive]
    ///   int64 another_value = 3 [(buf.validate.field).int64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be greater than or equal to 5 [int64.gte]
    ///   int64 value = 1 [(buf.validate.field).int64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [int64.gte_lt]
    ///   int64 other_value = 2 [(buf.validate.field).int64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [int64.gte_lt_exclusive]
    ///   int64 another_value = 3 [(buf.validate.field).int64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated int64 value = 1 (buf.validate.field).int64 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated int64 value = 1 (buf.validate.field).int64 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// UInt32Rules describes the constraints applied to `uint32` values. These
  /// rules may also be applied to the `google.protobuf.UInt32Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UInt32Rules : pb::IMessage<UInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt32Rules> _parser = new pb::MessageParser<UInt32Rules>(() => new UInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules(UInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules Clone() {
      return new UInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must equal 42
    ///   uint32 value = 1 [(buf.validate.field).uint32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be less than 10
    ///   uint32 value = 1 [(buf.validate.field).uint32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { return HasLt ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be less than or equal to 10
    ///   uint32 value = 1 [(buf.validate.field).uint32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { return HasLte ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be greater than 5 [uint32.gt]
    ///   uint32 value = 1 [(buf.validate.field).uint32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [uint32.gt_lt]
    ///   uint32 other_value = 2 [(buf.validate.field).uint32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [uint32.gt_lt_exclusive]
    ///   uint32 another_value = 3 [(buf.validate.field).uint32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { return HasGt ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be greater than or equal to 5 [uint32.gte]
    ///   uint32 value = 1 [(buf.validate.field).uint32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [uint32.gte_lt]
    ///   uint32 other_value = 2 [(buf.validate.field).uint32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [uint32.gte_lt_exclusive]
    ///   uint32 another_value = 3 [(buf.validate.field).uint32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { return HasGte ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated uint32 value = 1 (buf.validate.field).uint32 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated uint32 value = 1 (buf.validate.field).uint32 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// UInt64Rules describes the constraints applied to `uint64` values. These
  /// rules may also be applied to the `google.protobuf.UInt64Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UInt64Rules : pb::IMessage<UInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt64Rules> _parser = new pb::MessageParser<UInt64Rules>(() => new UInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules(UInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules Clone() {
      return new UInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must equal 42
    ///   uint64 value = 1 [(buf.validate.field).uint64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be less than 10
    ///   uint64 value = 1 [(buf.validate.field).uint64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { return HasLt ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be less than or equal to 10
    ///   uint64 value = 1 [(buf.validate.field).uint64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { return HasLte ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be greater than 5 [uint64.gt]
    ///   uint64 value = 1 [(buf.validate.field).uint64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [uint64.gt_lt]
    ///   uint64 other_value = 2 [(buf.validate.field).uint64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [uint64.gt_lt_exclusive]
    ///   uint64 another_value = 3 [(buf.validate.field).uint64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { return HasGt ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be greater than or equal to 5 [uint64.gte]
    ///   uint64 value = 1 [(buf.validate.field).uint64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [uint64.gte_lt]
    ///   uint64 other_value = 2 [(buf.validate.field).uint64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [uint64.gte_lt_exclusive]
    ///   uint64 another_value = 3 [(buf.validate.field).uint64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { return HasGte ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated uint64 value = 1 (buf.validate.field).uint64 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated uint64 value = 1 (buf.validate.field).uint64 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SInt32Rules describes the constraints applied to `sint32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SInt32Rules : pb::IMessage<SInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt32Rules> _parser = new pb::MessageParser<SInt32Rules>(() => new SInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules(SInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules Clone() {
      return new SInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must equal 42
    ///   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be less than 10
    ///   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be less than or equal to 10
    ///   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be greater than 5 [sint32.gt]
    ///   sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sint32.gt_lt]
    ///   sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
    ///   sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///  // value must be greater than or equal to 5 [sint32.gte]
    ///  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
    ///
    ///  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
    ///  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
    ///
    ///  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
    ///  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSInt32(50);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt32(58);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SInt64Rules describes the constraints applied to `sint64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SInt64Rules : pb::IMessage<SInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt64Rules> _parser = new pb::MessageParser<SInt64Rules>(() => new SInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules(SInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules Clone() {
      return new SInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must equal 42
    ///   sint64 value = 1 [(buf.validate.field).sint64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be less than 10
    ///   sint64 value = 1 [(buf.validate.field).sint64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be less than or equal to 10
    ///   sint64 value = 1 [(buf.validate.field).sint64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be greater than 5 [sint64.gt]
    ///   sint64 value = 1 [(buf.validate.field).sint64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sint64.gt_lt]
    ///   sint64 other_value = 2 [(buf.validate.field).sint64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sint64.gt_lt_exclusive]
    ///   sint64 another_value = 3 [(buf.validate.field).sint64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be greater than or equal to 5 [sint64.gte]
    ///   sint64 value = 1 [(buf.validate.field).sint64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sint64.gte_lt]
    ///   sint64 other_value = 2 [(buf.validate.field).sint64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sint64.gte_lt_exclusive]
    ///   sint64 another_value = 3 [(buf.validate.field).sint64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSInt64(50);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated sint64 value = 1 (buf.validate.field).sint64 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt64(58);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated sint64 value = 1 (buf.validate.field).sint64 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Fixed32Rules describes the constraints applied to `fixed32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Fixed32Rules : pb::IMessage<Fixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed32Rules> _parser = new pb::MessageParser<Fixed32Rules>(() => new Fixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules(Fixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules Clone() {
      return new Fixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must equal 42
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be less than 10
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { return HasLt ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be less than or equal to 10
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { return HasLte ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be greater than 5 [fixed32.gt]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [fixed32.gt_lt]
    ///   fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [fixed32.gt_lt_exclusive]
    ///   fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { return HasGt ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be greater than or equal to 5 [fixed32.gte]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [fixed32.gte_lt]
    ///   fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [fixed32.gte_lt_exclusive]
    ///   fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { return HasGte ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForFixed32(50);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated fixed32 value = 1 (buf.validate.field).fixed32 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed32(58);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated fixed32 value = 1 (buf.validate.field).fixed32 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Fixed64Rules describes the constraints applied to `fixed64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Fixed64Rules : pb::IMessage<Fixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed64Rules> _parser = new pb::MessageParser<Fixed64Rules>(() => new Fixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules(Fixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules Clone() {
      return new Fixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must equal 42
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be less than 10
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { return HasLt ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be less than or equal to 10
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { return HasLte ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be greater than 5 [fixed64.gt]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [fixed64.gt_lt]
    ///   fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [fixed64.gt_lt_exclusive]
    ///   fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { return HasGt ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be greater than or equal to 5 [fixed64.gte]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [fixed64.gte_lt]
    ///   fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [fixed64.gte_lt_exclusive]
    ///   fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { return HasGte ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForFixed64(50);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated fixed64 value = 1 (buf.validate.field).fixed64 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed64(58);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated fixed64 value = 1 (buf.validate.field).fixed64 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SFixed32Rules describes the constraints applied to `fixed32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SFixed32Rules : pb::IMessage<SFixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed32Rules> _parser = new pb::MessageParser<SFixed32Rules>(() => new SFixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules(SFixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules Clone() {
      return new SFixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must equal 42
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be less than 10
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be less than or equal to 10
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be greater than 5 [sfixed32.gt]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sfixed32.gt_lt]
    ///   sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sfixed32.gt_lt_exclusive]
    ///   sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be greater than or equal to 5 [sfixed32.gte]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sfixed32.gte_lt]
    ///   sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sfixed32.gte_lt_exclusive]
    ///   sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSFixed32(50);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated sfixed32 value = 1 (buf.validate.field).sfixed32 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed32(58);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated sfixed32 value = 1 (buf.validate.field).sfixed32 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SFixed64Rules describes the constraints applied to `fixed64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SFixed64Rules : pb::IMessage<SFixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed64Rules> _parser = new pb::MessageParser<SFixed64Rules>(() => new SFixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules(SFixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules Clone() {
      return new SFixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must equal 42
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be less than 10
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be less than or equal to 10
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be greater than 5 [sfixed64.gt]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sfixed64.gt_lt]
    ///   sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sfixed64.gt_lt_exclusive]
    ///   sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be greater than or equal to 5 [sfixed64.gte]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sfixed64.gte_lt]
    ///   sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sfixed64.gte_lt_exclusive]
    ///   sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSFixed64(50);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be in list [1, 2, 3]
    ///   repeated sfixed64 value = 1 (buf.validate.field).sfixed64 = { in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed64(58);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must not be in list [1, 2, 3]
    ///   repeated sfixed64 value = 1 (buf.validate.field).sfixed64 = { not_in: [1, 2, 3] };
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BoolRules describes the constraints applied to `bool` values. These rules
  /// may also be applied to the `google.protobuf.BoolValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BoolRules : pb::IMessage<BoolRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoolRules> _parser = new pb::MessageParser<BoolRules>(() => new BoolRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoolRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules(BoolRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules Clone() {
      return new BoolRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static bool ConstDefaultValue = false;

    private bool const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified boolean value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBool {
    ///   // value must equal true
    ///   bool value = 1 [(buf.validate.field).bool.const = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoolRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoolRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoolRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// StringRules describes the constraints applied to `string` values These
  /// rules may also be applied to the `google.protobuf.StringValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StringRules : pb::IMessage<StringRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringRules> _parser = new pb::MessageParser<StringRules>(() => new StringRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StringRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules(StringRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      lenBytes_ = other.lenBytes_;
      minBytes_ = other.minBytes_;
      maxBytes_ = other.maxBytes_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      notContains_ = other.notContains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      strict_ = other.strict_;
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.Tuuid:
          Tuuid = other.Tuuid;
          break;
        case WellKnownOneofCase.IpWithPrefixlen:
          IpWithPrefixlen = other.IpWithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv4WithPrefixlen:
          Ipv4WithPrefixlen = other.Ipv4WithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv6WithPrefixlen:
          Ipv6WithPrefixlen = other.Ipv6WithPrefixlen;
          break;
        case WellKnownOneofCase.IpPrefix:
          IpPrefix = other.IpPrefix;
          break;
        case WellKnownOneofCase.Ipv4Prefix:
          Ipv4Prefix = other.Ipv4Prefix;
          break;
        case WellKnownOneofCase.Ipv6Prefix:
          Ipv6Prefix = other.Ipv6Prefix;
          break;
        case WellKnownOneofCase.HostAndPort:
          HostAndPort = other.HostAndPort;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules Clone() {
      return new StringRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static string ConstDefaultValue = "";

    private string const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must equal `hello`
    ///   string value = 1 [(buf.validate.field).string.const = "hello"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 19;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// `len` dictates that the field value must have the specified
    /// number of characters (Unicode code points), which may differ from the number
    /// of bytes in the string. If the field value does not meet the specified
    /// length, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be 5 characters
    ///   string value = 1 [(buf.validate.field).string.len = 5];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 16) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// `min_len` specifies that the field value must have at least the specified
    /// number of characters (Unicode code points), which may differ from the number
    /// of bytes in the string. If the field value contains fewer characters, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at least 3 characters
    ///   string value = 1 [(buf.validate.field).string.min_len = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// `max_len` specifies that the field value must have no more than the specified
    /// number of characters (Unicode code points), which may differ from the
    /// number of bytes in the string. If the field value contains more characters,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at most 10 characters
    ///   string value = 1 [(buf.validate.field).string.max_len = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "len_bytes" field.</summary>
    public const int LenBytesFieldNumber = 20;
    private readonly static ulong LenBytesDefaultValue = 0UL;

    private ulong lenBytes_;
    /// <summary>
    /// `len_bytes` dictates that the field value must have the specified number of
    /// bytes. If the field value does not match the specified length in bytes,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be 6 bytes
    ///   string value = 1 [(buf.validate.field).string.len_bytes = 6];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LenBytes {
      get { if ((_hasBits0 & 32) != 0) { return lenBytes_; } else { return LenBytesDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lenBytes_ = value;
      }
    }
    /// <summary>Gets whether the "len_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLenBytes {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "len_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLenBytes() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "min_bytes" field.</summary>
    public const int MinBytesFieldNumber = 4;
    private readonly static ulong MinBytesDefaultValue = 0UL;

    private ulong minBytes_;
    /// <summary>
    /// `min_bytes` specifies that the field value must have at least the specified
    /// number of bytes. If the field value contains fewer bytes, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at least 4 bytes
    ///   string value = 1 [(buf.validate.field).string.min_bytes = 4];
    /// }
    ///
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinBytes {
      get { if ((_hasBits0 & 4) != 0) { return minBytes_; } else { return MinBytesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBytes_ = value;
      }
    }
    /// <summary>Gets whether the "min_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBytes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBytes() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_bytes" field.</summary>
    public const int MaxBytesFieldNumber = 5;
    private readonly static ulong MaxBytesDefaultValue = 0UL;

    private ulong maxBytes_;
    /// <summary>
    /// `max_bytes` specifies that the field value must have no more than the
    ///specified number of bytes. If the field value contains more bytes, an
    /// error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at most 8 bytes
    ///   string value = 1 [(buf.validate.field).string.max_bytes = 8];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxBytes {
      get { if ((_hasBits0 & 8) != 0) { return maxBytes_; } else { return MaxBytesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxBytes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBytes {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBytes() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 6;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// `pattern` specifies that the field value must match the specified
    /// regular expression (RE2 syntax), with the expression provided without any
    /// delimiters. If the field value doesn't match the regular expression, an
    /// error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not match regex pattern `^[a-zA-Z]//$`
    ///   string value = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z]//$"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 7;
    private readonly static string PrefixDefaultValue = "";

    private string prefix_;
    /// <summary>
    /// `prefix` specifies that the field value must have the
    ///specified substring at the beginning of the string. If the field value
    /// doesn't start with the specified prefix, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not have prefix `pre`
    ///   string value = 1 [(buf.validate.field).string.prefix = "pre"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 8;
    private readonly static string SuffixDefaultValue = "";

    private string suffix_;
    /// <summary>
    /// `suffix` specifies that the field value must have the
    ///specified substring at the end of the string. If the field value doesn't
    /// end with the specified suffix, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not have suffix `post`
    ///   string value = 1 [(buf.validate.field).string.suffix = "post"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 9;
    private readonly static string ContainsDefaultValue = "";

    private string contains_;
    /// <summary>
    /// `contains` specifies that the field value must have the
    ///specified substring anywhere in the string. If the field value doesn't
    /// contain the specified substring, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not contain substring `inside`.
    ///   string value = 1 [(buf.validate.field).string.contains = "inside"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "not_contains" field.</summary>
    public const int NotContainsFieldNumber = 23;
    private readonly static string NotContainsDefaultValue = "";

    private string notContains_;
    /// <summary>
    /// `not_contains` specifies that the field value must not have the
    ///specified substring anywhere in the string. If the field value contains
    /// the specified substring, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value contains substring `inside`.
    ///   string value = 1 [(buf.validate.field).string.not_contains = "inside"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NotContains {
      get { return notContains_ ?? NotContainsDefaultValue; }
      set {
        notContains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "not_contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNotContains {
      get { return notContains_ != null; }
    }
    /// <summary>Clears the value of the "not_contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNotContains() {
      notContains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `in` specifies that the field value must be equal to one of the specified
    /// values. If the field value isn't one of the specified values, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be in list ["apple", "banana"]
    ///   repeated string value = 1 [(buf.validate.field).string.in = "apple", (buf.validate.field).string.in = "banana"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `not_in` specifies that the field value cannot be equal to any
    /// of the specified values. If the field value is one of the specified values,
    /// an error message will be generated.
    /// ```proto
    /// message MyString {
    ///   // value must not be in list ["orange", "grape"]
    ///   repeated string value = 1 [(buf.validate.field).string.not_in = "orange", (buf.validate.field).string.not_in = "grape"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 12;
    /// <summary>
    /// `email` specifies that the field value must be a valid email address
    /// (addr-spec only) as defined by [RFC 5322](https://tools.ietf.org/html/rfc5322#section-3.4.1).
    /// If the field value isn't a valid email address, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid email address
    ///   string value = 1 [(buf.validate.field).string.email = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Email {
      get { return HasEmail ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Email;
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmail {
      get { return wellKnownCase_ == WellKnownOneofCase.Email; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "email" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmail() {
      if (HasEmail) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 13;
    /// <summary>
    /// `hostname` specifies that the field value must be a valid
    /// hostname as defined by [RFC 1034](https://tools.ietf.org/html/rfc1034#section-3.5). This constraint doesn't support
    /// internationalized domain names (IDNs). If the field value isn't a
    /// valid hostname, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid hostname
    ///   string value = 1 [(buf.validate.field).string.hostname = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hostname {
      get { return HasHostname ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Hostname;
      }
    }
    /// <summary>Gets whether the "hostname" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostname {
      get { return wellKnownCase_ == WellKnownOneofCase.Hostname; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "hostname" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostname() {
      if (HasHostname) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 14;
    /// <summary>
    /// `ip` specifies that the field value must be a valid IP
    /// (v4 or v6) address, without surrounding square brackets for IPv6 addresses.
    /// If the field value isn't a valid IP address, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP address
    ///   string value = 1 [(buf.validate.field).string.ip = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 15;
    /// <summary>
    /// `ipv4` specifies that the field value must be a valid IPv4
    /// address. If the field value isn't a valid IPv4 address, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 address
    ///   string value = 1 [(buf.validate.field).string.ipv4 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 16;
    /// <summary>
    /// `ipv6` specifies that the field value must be a valid
    /// IPv6 address, without surrounding square brackets. If the field value is
    /// not a valid IPv6 address, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 address
    ///   string value = 1 [(buf.validate.field).string.ipv6 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 17;
    /// <summary>
    /// `uri` specifies that the field value must be a valid,
    /// absolute URI as defined by [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3). If the field value isn't a valid,
    /// absolute URI, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid URI
    ///   string value = 1 [(buf.validate.field).string.uri = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uri {
      get { return HasUri ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uri;
      }
    }
    /// <summary>Gets whether the "uri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUri {
      get { return wellKnownCase_ == WellKnownOneofCase.Uri; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUri() {
      if (HasUri) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri_ref" field.</summary>
    public const int UriRefFieldNumber = 18;
    /// <summary>
    /// `uri_ref` specifies that the field value must be a valid URI
    /// as defined by [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3) and may be either relative or absolute. If the
    /// field value isn't a valid URI, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid URI
    ///   string value = 1 [(buf.validate.field).string.uri_ref = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UriRef {
      get { return HasUriRef ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.UriRef;
      }
    }
    /// <summary>Gets whether the "uri_ref" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUriRef {
      get { return wellKnownCase_ == WellKnownOneofCase.UriRef; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri_ref" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUriRef() {
      if (HasUriRef) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 21;
    /// <summary>
    /// `address` specifies that the field value must be either a valid hostname
    /// as defined by [RFC 1034](https://tools.ietf.org/html/rfc1034#section-3.5)
    /// (which doesn't support internationalized domain names or IDNs) or a valid
    /// IP (v4 or v6). If the field value isn't a valid hostname or IP, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid hostname, or ip address
    ///   string value = 1 [(buf.validate.field).string.address = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Address {
      get { return HasAddress ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Address;
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddress {
      get { return wellKnownCase_ == WellKnownOneofCase.Address; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "address" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddress() {
      if (HasAddress) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 22;
    /// <summary>
    /// `uuid` specifies that the field value must be a valid UUID as defined by
    /// [RFC 4122](https://tools.ietf.org/html/rfc4122#section-4.1.2). If the
    /// field value isn't a valid UUID, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid UUID
    ///   string value = 1 [(buf.validate.field).string.uuid = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uuid {
      get { return HasUuid ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uuid;
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUuid {
      get { return wellKnownCase_ == WellKnownOneofCase.Uuid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uuid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUuid() {
      if (HasUuid) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "tuuid" field.</summary>
    public const int TuuidFieldNumber = 33;
    /// <summary>
    /// `tuuid` (trimmed UUID) specifies that the field value must be a valid UUID as
    /// defined by [RFC 4122](https://tools.ietf.org/html/rfc4122#section-4.1.2) with all dashes
    /// omitted. If the field value isn't a valid UUID without dashes, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid trimmed UUID
    ///   string value = 1 [(buf.validate.field).string.tuuid = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Tuuid {
      get { return HasTuuid ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Tuuid;
      }
    }
    /// <summary>Gets whether the "tuuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTuuid {
      get { return wellKnownCase_ == WellKnownOneofCase.Tuuid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "tuuid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTuuid() {
      if (HasTuuid) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip_with_prefixlen" field.</summary>
    public const int IpWithPrefixlenFieldNumber = 26;
    /// <summary>
    /// `ip_with_prefixlen` specifies that the field value must be a valid IP (v4 or v6)
    /// address with prefix length. If the field value isn't a valid IP with prefix
    /// length, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP with prefix length
    ///    string value = 1 [(buf.validate.field).string.ip_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpWithPrefixlen {
      get { return HasIpWithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.IpWithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ip_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpWithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.IpWithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpWithPrefixlen() {
      if (HasIpWithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4_with_prefixlen" field.</summary>
    public const int Ipv4WithPrefixlenFieldNumber = 27;
    /// <summary>
    /// `ipv4_with_prefixlen` specifies that the field value must be a valid
    /// IPv4 address with prefix.
    /// If the field value isn't a valid IPv4 address with prefix length,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 address with prefix length
    ///    string value = 1 [(buf.validate.field).string.ipv4_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4WithPrefixlen {
      get { return HasIpv4WithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4WithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ipv4_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4WithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4WithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4WithPrefixlen() {
      if (HasIpv4WithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6_with_prefixlen" field.</summary>
    public const int Ipv6WithPrefixlenFieldNumber = 28;
    /// <summary>
    /// `ipv6_with_prefixlen` specifies that the field value must be a valid
    /// IPv6 address with prefix length.
    /// If the field value is not a valid IPv6 address with prefix length,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 address prefix length
    ///    string value = 1 [(buf.validate.field).string.ipv6_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6WithPrefixlen {
      get { return HasIpv6WithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6WithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ipv6_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6WithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6WithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6WithPrefixlen() {
      if (HasIpv6WithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip_prefix" field.</summary>
    public const int IpPrefixFieldNumber = 29;
    /// <summary>
    /// `ip_prefix` specifies that the field value must be a valid IP (v4 or v6) prefix.
    /// If the field value isn't a valid IP prefix, an error message will be
    /// generated. The prefix must have all zeros for the masked bits of the prefix (e.g.,
    /// `127.0.0.0/16`, not `127.0.0.1/16`).
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP prefix
    ///    string value = 1 [(buf.validate.field).string.ip_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpPrefix {
      get { return HasIpPrefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.IpPrefix;
      }
    }
    /// <summary>Gets whether the "ip_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpPrefix {
      get { return wellKnownCase_ == WellKnownOneofCase.IpPrefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpPrefix() {
      if (HasIpPrefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4_prefix" field.</summary>
    public const int Ipv4PrefixFieldNumber = 30;
    /// <summary>
    /// `ipv4_prefix` specifies that the field value must be a valid IPv4
    /// prefix. If the field value isn't a valid IPv4 prefix, an error message
    /// will be generated. The prefix must have all zeros for the masked bits of
    /// the prefix (e.g., `127.0.0.0/16`, not `127.0.0.1/16`).
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 prefix
    ///    string value = 1 [(buf.validate.field).string.ipv4_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4Prefix {
      get { return HasIpv4Prefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4Prefix;
      }
    }
    /// <summary>Gets whether the "ipv4_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4Prefix {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4Prefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4Prefix() {
      if (HasIpv4Prefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6_prefix" field.</summary>
    public const int Ipv6PrefixFieldNumber = 31;
    /// <summary>
    /// `ipv6_prefix` specifies that the field value must be a valid IPv6 prefix.
    /// If the field value is not a valid IPv6 prefix, an error message will be
    /// generated. The prefix must have all zeros for the masked bits of the prefix
    /// (e.g., `2001:db8::/48`, not `2001:db8::1/48`).
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 prefix
    ///    string value = 1 [(buf.validate.field).string.ipv6_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6Prefix {
      get { return HasIpv6Prefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6Prefix;
      }
    }
    /// <summary>Gets whether the "ipv6_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6Prefix {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6Prefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6Prefix() {
      if (HasIpv6Prefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "host_and_port" field.</summary>
    public const int HostAndPortFieldNumber = 32;
    /// <summary>
    /// `host_and_port` specifies the field value must be a valid host and port
    /// pair. The host must be a valid hostname or IP address while the port
    /// must be in the range of 0-65535, inclusive. IPv6 addresses must be delimited
    /// with square brackets (e.g., `[::1]:1234`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HostAndPort {
      get { return HasHostAndPort ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.HostAndPort;
      }
    }
    /// <summary>Gets whether the "host_and_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostAndPort {
      get { return wellKnownCase_ == WellKnownOneofCase.HostAndPort; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "host_and_port" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostAndPort() {
      if (HasHostAndPort) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "well_known_regex" field.</summary>
    public const int WellKnownRegexFieldNumber = 24;
    /// <summary>
    /// `well_known_regex` specifies a common well-known pattern
    /// defined as a regex. If the field value doesn't match the well-known
    /// regex, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid HTTP header value
    ///   string value = 1 [(buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_VALUE];
    /// }
    /// ```
    ///
    /// #### KnownRegex
    ///
    /// `well_known_regex` contains some well-known patterns.
    ///
    /// | Name                          | Number | Description                               |
    /// |-------------------------------|--------|-------------------------------------------|
    /// | KNOWN_REGEX_UNSPECIFIED       | 0      |                                           |
    /// | KNOWN_REGEX_HTTP_HEADER_NAME  | 1      | HTTP header name as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2)  |
    /// | KNOWN_REGEX_HTTP_HEADER_VALUE | 2      | HTTP header value as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2.4) |
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.KnownRegex WellKnownRegex {
      get { return HasWellKnownRegex ? (global::Buf.Validate.KnownRegex) wellKnown_ : global::Buf.Validate.KnownRegex.Unspecified; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
      }
    }
    /// <summary>Gets whether the "well_known_regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWellKnownRegex {
      get { return wellKnownCase_ == WellKnownOneofCase.WellKnownRegex; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "well_known_regex" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnownRegex() {
      if (HasWellKnownRegex) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "strict" field.</summary>
    public const int StrictFieldNumber = 25;
    private readonly static bool StrictDefaultValue = false;

    private bool strict_;
    /// <summary>
    /// This applies to regexes `HTTP_HEADER_NAME` and `HTTP_HEADER_VALUE` to
    /// enable strict header validation. By default, this is true, and HTTP header
    /// validations are [RFC-compliant](https://tools.ietf.org/html/rfc7230#section-3). Setting to false will enable looser
    /// validations that only disallow `\r\n\0` characters, which can be used to
    /// bypass header matching rules.
    ///
    /// ```proto
    /// message MyString {
    ///   // The field `value` must have be a valid HTTP headers, but not enforced with strict rules.
    ///   string value = 1 [(buf.validate.field).string.strict = false];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Strict {
      get { if ((_hasBits0 & 64) != 0) { return strict_; } else { return StrictDefaultValue; } }
      set {
        _hasBits0 |= 64;
        strict_ = value;
      }
    }
    /// <summary>Gets whether the "strict" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrict {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "strict" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrict() {
      _hasBits0 &= ~64;
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Email = 12,
      Hostname = 13,
      Ip = 14,
      Ipv4 = 15,
      Ipv6 = 16,
      Uri = 17,
      UriRef = 18,
      Address = 21,
      Uuid = 22,
      Tuuid = 33,
      IpWithPrefixlen = 26,
      Ipv4WithPrefixlen = 27,
      Ipv6WithPrefixlen = 28,
      IpPrefix = 29,
      Ipv4Prefix = 30,
      Ipv6Prefix = 31,
      HostAndPort = 32,
      WellKnownRegex = 24,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StringRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StringRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (LenBytes != other.LenBytes) return false;
      if (MinBytes != other.MinBytes) return false;
      if (MaxBytes != other.MaxBytes) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if (NotContains != other.NotContains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Email != other.Email) return false;
      if (Hostname != other.Hostname) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (Uri != other.Uri) return false;
      if (UriRef != other.UriRef) return false;
      if (Address != other.Address) return false;
      if (Uuid != other.Uuid) return false;
      if (Tuuid != other.Tuuid) return false;
      if (IpWithPrefixlen != other.IpWithPrefixlen) return false;
      if (Ipv4WithPrefixlen != other.Ipv4WithPrefixlen) return false;
      if (Ipv6WithPrefixlen != other.Ipv6WithPrefixlen) return false;
      if (IpPrefix != other.IpPrefix) return false;
      if (Ipv4Prefix != other.Ipv4Prefix) return false;
      if (Ipv6Prefix != other.Ipv6Prefix) return false;
      if (HostAndPort != other.HostAndPort) return false;
      if (WellKnownRegex != other.WellKnownRegex) return false;
      if (Strict != other.Strict) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasLenBytes) hash ^= LenBytes.GetHashCode();
      if (HasMinBytes) hash ^= MinBytes.GetHashCode();
      if (HasMaxBytes) hash ^= MaxBytes.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      if (HasNotContains) hash ^= NotContains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasHostname) hash ^= Hostname.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      if (HasUri) hash ^= Uri.GetHashCode();
      if (HasUriRef) hash ^= UriRef.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasTuuid) hash ^= Tuuid.GetHashCode();
      if (HasIpWithPrefixlen) hash ^= IpWithPrefixlen.GetHashCode();
      if (HasIpv4WithPrefixlen) hash ^= Ipv4WithPrefixlen.GetHashCode();
      if (HasIpv6WithPrefixlen) hash ^= Ipv6WithPrefixlen.GetHashCode();
      if (HasIpPrefix) hash ^= IpPrefix.GetHashCode();
      if (HasIpv4Prefix) hash ^= Ipv4Prefix.GetHashCode();
      if (HasIpv6Prefix) hash ^= Ipv6Prefix.GetHashCode();
      if (HasHostAndPort) hash ^= HostAndPort.GetHashCode();
      if (HasWellKnownRegex) hash ^= WellKnownRegex.GetHashCode();
      if (HasStrict) hash ^= Strict.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIpWithPrefixlen) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IpWithPrefixlen);
      }
      if (HasIpv4WithPrefixlen) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Ipv4WithPrefixlen);
      }
      if (HasIpv6WithPrefixlen) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Ipv6WithPrefixlen);
      }
      if (HasIpPrefix) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpPrefix);
      }
      if (HasIpv4Prefix) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Ipv4Prefix);
      }
      if (HasIpv6Prefix) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Ipv6Prefix);
      }
      if (HasHostAndPort) {
        output.WriteRawTag(128, 2);
        output.WriteBool(HostAndPort);
      }
      if (HasTuuid) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Tuuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIpWithPrefixlen) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IpWithPrefixlen);
      }
      if (HasIpv4WithPrefixlen) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Ipv4WithPrefixlen);
      }
      if (HasIpv6WithPrefixlen) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Ipv6WithPrefixlen);
      }
      if (HasIpPrefix) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpPrefix);
      }
      if (HasIpv4Prefix) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Ipv4Prefix);
      }
      if (HasIpv6Prefix) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Ipv6Prefix);
      }
      if (HasHostAndPort) {
        output.WriteRawTag(128, 2);
        output.WriteBool(HostAndPort);
      }
      if (HasTuuid) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Tuuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Const);
      }
      if (HasLen) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasLenBytes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LenBytes);
      }
      if (HasMinBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinBytes);
      }
      if (HasMaxBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxBytes);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contains);
      }
      if (HasNotContains) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NotContains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasEmail) {
        size += 1 + 1;
      }
      if (HasHostname) {
        size += 1 + 1;
      }
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 2 + 1;
      }
      if (HasUri) {
        size += 2 + 1;
      }
      if (HasUriRef) {
        size += 2 + 1;
      }
      if (HasAddress) {
        size += 2 + 1;
      }
      if (HasUuid) {
        size += 2 + 1;
      }
      if (HasTuuid) {
        size += 2 + 1;
      }
      if (HasIpWithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpv4WithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpv6WithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpPrefix) {
        size += 2 + 1;
      }
      if (HasIpv4Prefix) {
        size += 2 + 1;
      }
      if (HasIpv6Prefix) {
        size += 2 + 1;
      }
      if (HasHostAndPort) {
        size += 2 + 1;
      }
      if (HasWellKnownRegex) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WellKnownRegex);
      }
      if (HasStrict) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StringRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasLenBytes) {
        LenBytes = other.LenBytes;
      }
      if (other.HasMinBytes) {
        MinBytes = other.MinBytes;
      }
      if (other.HasMaxBytes) {
        MaxBytes = other.MaxBytes;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      if (other.HasNotContains) {
        NotContains = other.NotContains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasStrict) {
        Strict = other.Strict;
      }
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.Tuuid:
          Tuuid = other.Tuuid;
          break;
        case WellKnownOneofCase.IpWithPrefixlen:
          IpWithPrefixlen = other.IpWithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv4WithPrefixlen:
          Ipv4WithPrefixlen = other.Ipv4WithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv6WithPrefixlen:
          Ipv6WithPrefixlen = other.Ipv6WithPrefixlen;
          break;
        case WellKnownOneofCase.IpPrefix:
          IpPrefix = other.IpPrefix;
          break;
        case WellKnownOneofCase.Ipv4Prefix:
          Ipv4Prefix = other.Ipv4Prefix;
          break;
        case WellKnownOneofCase.Ipv6Prefix:
          Ipv6Prefix = other.Ipv6Prefix;
          break;
        case WellKnownOneofCase.HostAndPort:
          HostAndPort = other.HostAndPort;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IpWithPrefixlen = input.ReadBool();
            break;
          }
          case 216: {
            Ipv4WithPrefixlen = input.ReadBool();
            break;
          }
          case 224: {
            Ipv6WithPrefixlen = input.ReadBool();
            break;
          }
          case 232: {
            IpPrefix = input.ReadBool();
            break;
          }
          case 240: {
            Ipv4Prefix = input.ReadBool();
            break;
          }
          case 248: {
            Ipv6Prefix = input.ReadBool();
            break;
          }
          case 256: {
            HostAndPort = input.ReadBool();
            break;
          }
          case 264: {
            Tuuid = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IpWithPrefixlen = input.ReadBool();
            break;
          }
          case 216: {
            Ipv4WithPrefixlen = input.ReadBool();
            break;
          }
          case 224: {
            Ipv6WithPrefixlen = input.ReadBool();
            break;
          }
          case 232: {
            IpPrefix = input.ReadBool();
            break;
          }
          case 240: {
            Ipv4Prefix = input.ReadBool();
            break;
          }
          case 248: {
            Ipv6Prefix = input.ReadBool();
            break;
          }
          case 256: {
            HostAndPort = input.ReadBool();
            break;
          }
          case 264: {
            Tuuid = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BytesRules describe the constraints applied to `bytes` values. These rules
  /// may also be applied to the `google.protobuf.BytesValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BytesRules : pb::IMessage<BytesRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesRules> _parser = new pb::MessageParser<BytesRules>(() => new BytesRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BytesRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules(BytesRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules Clone() {
      return new BytesRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static pb::ByteString ConstDefaultValue = pb::ByteString.Empty;

    private pb::ByteString const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified bytes
    /// value. If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be "\x01\x02\x03\x04"
    ///   bytes value = 1 [(buf.validate.field).bytes.const = "\x01\x02\x03\x04"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 13;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// `len` requires the field value to have the specified length in bytes.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value length must be 4 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.len = 4];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 4) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// `min_len` requires the field value to have at least the specified minimum
    /// length in bytes.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value length must be at least 2 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.min_len = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// `max_len` requires the field value to have at most the specified maximum
    /// length in bytes.
    /// If the field value exceeds the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be at most 6 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.max_len = 6];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 4;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// `pattern` requires the field value to match the specified regular
    /// expression ([RE2 syntax](https://github.com/google/re2/wiki/Syntax)).
    /// The value of the field must be valid UTF-8 or validation will fail with a
    /// runtime error.
    /// If the field value doesn't match the pattern, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must match regex pattern "^[a-zA-Z0-9]+$".
    ///   optional bytes value = 1 [(buf.validate.field).bytes.pattern = "^[a-zA-Z0-9]+$"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 5;
    private readonly static pb::ByteString PrefixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString prefix_;
    /// <summary>
    /// `prefix` requires the field value to have the specified bytes at the
    /// beginning of the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value does not have prefix \x01\x02
    ///   optional bytes value = 1 [(buf.validate.field).bytes.prefix = "\x01\x02"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 6;
    private readonly static pb::ByteString SuffixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString suffix_;
    /// <summary>
    /// `suffix` requires the field value to have the specified bytes at the end
    /// of the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value does not have suffix \x03\x04
    ///   optional bytes value = 1 [(buf.validate.field).bytes.suffix = "\x03\x04"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 7;
    private readonly static pb::ByteString ContainsDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contains_;
    /// <summary>
    /// `contains` requires the field value to have the specified bytes anywhere in
    /// the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```protobuf
    /// message MyBytes {
    ///   // value does not contain \x02\x03
    ///   optional bytes value = 1 [(buf.validate.field).bytes.contains = "\x02\x03"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 8;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_in_codec
        = pb::FieldCodec.ForBytes(66);
    private readonly pbc::RepeatedField<pb::ByteString> in_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified
    /// values. If the field value doesn't match any of the specified values, an
    /// error message is generated.
    ///
    /// ```protobuf
    /// message MyBytes {
    ///   // value must in ["\x01\x02", "\x02\x03", "\x03\x04"]
    ///   optional bytes value = 1 [(buf.validate.field).bytes.in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_notIn_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> notIn_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// `not_in` requires the field value to be not equal to any of the specified
    /// values.
    /// If the field value matches any of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must not in ["\x01\x02", "\x02\x03", "\x03\x04"]
    ///   optional bytes value = 1 [(buf.validate.field).bytes.not_in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 10;
    /// <summary>
    /// `ip` ensures that the field `value` is a valid IP address (v4 or v6) in byte format.
    /// If the field value doesn't meet this constraint, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IP address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ip = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 11;
    /// <summary>
    /// `ipv4` ensures that the field `value` is a valid IPv4 address in byte format.
    /// If the field value doesn't meet this constraint, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IPv4 address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ipv4 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 12;
    /// <summary>
    /// `ipv6` ensures that the field `value` is a valid IPv6 address in byte format.
    /// If the field value doesn't meet this constraint, an error message is generated.
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IPv6 address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ipv6 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Ip = 10,
      Ipv4 = 11,
      Ipv6 = 12,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BytesRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BytesRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Const);
      }
      if (HasLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BytesRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// EnumRules describe the constraints applied to `enum` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EnumRules : pb::IMessage<EnumRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnumRules> _parser = new pb::MessageParser<EnumRules>(() => new EnumRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EnumRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules(EnumRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      definedOnly_ = other.definedOnly_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules Clone() {
      return new EnumRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified enum value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be exactly MY_ENUM_VALUE1.
    ///   MyEnum value = 1 [(buf.validate.field).enum.const = 1];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "defined_only" field.</summary>
    public const int DefinedOnlyFieldNumber = 2;
    private readonly static bool DefinedOnlyDefaultValue = false;

    private bool definedOnly_;
    /// <summary>
    /// `defined_only` requires the field value to be one of the defined values for
    /// this enum, failing on any undefined value.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be a defined value of MyEnum.
    ///   MyEnum value = 1 [(buf.validate.field).enum.defined_only = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DefinedOnly {
      get { if ((_hasBits0 & 2) != 0) { return definedOnly_; } else { return DefinedOnlyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        definedOnly_ = value;
      }
    }
    /// <summary>Gets whether the "defined_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefinedOnly {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "defined_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefinedOnly() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the
    ///specified enum values. If the field value doesn't match any of the
    ///specified values, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be equal to one of the specified values.
    ///   MyEnum value = 1 [(buf.validate.field).enum = { in: [1, 2]}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to be not equal to any of the
    ///specified enum values. If the field value matches one of the specified
    /// values, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must not be equal to any of the specified values.
    ///   MyEnum value = 1 [(buf.validate.field).enum = { not_in: [1, 2]}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EnumRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EnumRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (DefinedOnly != other.DefinedOnly) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasDefinedOnly) hash ^= DefinedOnly.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasDefinedOnly) {
        size += 1 + 1;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EnumRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasDefinedOnly) {
        DefinedOnly = other.DefinedOnly;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// RepeatedRules describe the constraints applied to `repeated` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RepeatedRules : pb::IMessage<RepeatedRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RepeatedRules> _parser = new pb::MessageParser<RepeatedRules>(() => new RepeatedRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RepeatedRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules(RepeatedRules other) : this() {
      _hasBits0 = other._hasBits0;
      minItems_ = other.minItems_;
      maxItems_ = other.maxItems_;
      unique_ = other.unique_;
      items_ = other.items_ != null ? other.items_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules Clone() {
      return new RepeatedRules(this);
    }

    /// <summary>Field number for the "min_items" field.</summary>
    public const int MinItemsFieldNumber = 1;
    private readonly static ulong MinItemsDefaultValue = 0UL;

    private ulong minItems_;
    /// <summary>
    /// `min_items` requires that this field must contain at least the specified
    /// minimum number of items.
    ///
    /// Note that `min_items = 1` is equivalent to setting a field as `required`.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // value must contain at least  2 items
    ///   repeated string value = 1 [(buf.validate.field).repeated.min_items = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinItems {
      get { if ((_hasBits0 & 1) != 0) { return minItems_; } else { return MinItemsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minItems_ = value;
      }
    }
    /// <summary>Gets whether the "min_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinItems {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinItems() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_items" field.</summary>
    public const int MaxItemsFieldNumber = 2;
    private readonly static ulong MaxItemsDefaultValue = 0UL;

    private ulong maxItems_;
    /// <summary>
    /// `max_items` denotes that this field must not exceed a
    /// certain number of items as the upper limit. If the field contains more
    /// items than specified, an error message will be generated, requiring the
    /// field to maintain no more than the specified number of items.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // value must contain no more than 3 item(s)
    ///   repeated string value = 1 [(buf.validate.field).repeated.max_items = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxItems {
      get { if ((_hasBits0 & 2) != 0) { return maxItems_; } else { return MaxItemsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxItems_ = value;
      }
    }
    /// <summary>Gets whether the "max_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxItems {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxItems() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 3;
    private readonly static bool UniqueDefaultValue = false;

    private bool unique_;
    /// <summary>
    /// `unique` indicates that all elements in this field must
    /// be unique. This constraint is strictly applicable to scalar and enum
    /// types, with message types not being supported.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // repeated value must contain unique items
    ///   repeated string value = 1 [(buf.validate.field).repeated.unique = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Unique {
      get { if ((_hasBits0 & 4) != 0) { return unique_; } else { return UniqueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unique_ = value;
      }
    }
    /// <summary>Gets whether the "unique" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnique {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unique" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnique() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private global::Buf.Validate.FieldConstraints items_;
    /// <summary>
    /// `items` details the constraints to be applied to each item
    /// in the field. Even for repeated message fields, validation is executed
    /// against each item unless skip is explicitly specified.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // The items in the field `value` must follow the specified constraints.
    ///   repeated string value = 1 [(buf.validate.field).repeated.items = {
    ///     string: {
    ///       min_len: 3
    ///       max_len: 10
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldConstraints Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RepeatedRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RepeatedRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinItems != other.MinItems) return false;
      if (MaxItems != other.MaxItems) return false;
      if (Unique != other.Unique) return false;
      if (!object.Equals(Items, other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinItems) hash ^= MinItems.GetHashCode();
      if (HasMaxItems) hash ^= MaxItems.GetHashCode();
      if (HasUnique) hash ^= Unique.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinItems);
      }
      if (HasMaxItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxItems);
      }
      if (HasUnique) {
        size += 1 + 1;
      }
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RepeatedRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinItems) {
        MinItems = other.MinItems;
      }
      if (other.HasMaxItems) {
        MaxItems = other.MaxItems;
      }
      if (other.HasUnique) {
        Unique = other.Unique;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          Items = new global::Buf.Validate.FieldConstraints();
        }
        Items.MergeFrom(other.Items);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Items);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Items);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MapRules describe the constraints applied to `map` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MapRules : pb::IMessage<MapRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapRules> _parser = new pb::MessageParser<MapRules>(() => new MapRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MapRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules(MapRules other) : this() {
      _hasBits0 = other._hasBits0;
      minPairs_ = other.minPairs_;
      maxPairs_ = other.maxPairs_;
      keys_ = other.keys_ != null ? other.keys_.Clone() : null;
      values_ = other.values_ != null ? other.values_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules Clone() {
      return new MapRules(this);
    }

    /// <summary>Field number for the "min_pairs" field.</summary>
    public const int MinPairsFieldNumber = 1;
    private readonly static ulong MinPairsDefaultValue = 0UL;

    private ulong minPairs_;
    /// <summary>
    ///Specifies the minimum number of key-value pairs allowed. If the field has
    /// fewer key-value pairs than specified, an error message is generated.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The field `value` must have at least 2 key-value pairs.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.min_pairs = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinPairs {
      get { if ((_hasBits0 & 1) != 0) { return minPairs_; } else { return MinPairsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minPairs_ = value;
      }
    }
    /// <summary>Gets whether the "min_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinPairs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinPairs() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_pairs" field.</summary>
    public const int MaxPairsFieldNumber = 2;
    private readonly static ulong MaxPairsDefaultValue = 0UL;

    private ulong maxPairs_;
    /// <summary>
    ///Specifies the maximum number of key-value pairs allowed. If the field has
    /// more key-value pairs than specified, an error message is generated.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The field `value` must have at most 3 key-value pairs.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.max_pairs = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxPairs {
      get { if ((_hasBits0 & 2) != 0) { return maxPairs_; } else { return MaxPairsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxPairs_ = value;
      }
    }
    /// <summary>Gets whether the "max_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxPairs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxPairs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private global::Buf.Validate.FieldConstraints keys_;
    /// <summary>
    ///Specifies the constraints to be applied to each key in the field.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The keys in the field `value` must follow the specified constraints.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.keys = {
    ///     string: {
    ///       min_len: 3
    ///       max_len: 10
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldConstraints Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 5;
    private global::Buf.Validate.FieldConstraints values_;
    /// <summary>
    ///Specifies the constraints to be applied to the value of each key in the
    /// field. Message values will still have their validations evaluated unless
    ///skip is specified here.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The values in the field `value` must follow the specified constraints.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.values = {
    ///     string: {
    ///       min_len: 5
    ///       max_len: 20
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldConstraints Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MapRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MapRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPairs != other.MinPairs) return false;
      if (MaxPairs != other.MaxPairs) return false;
      if (!object.Equals(Keys, other.Keys)) return false;
      if (!object.Equals(Values, other.Values)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinPairs) hash ^= MinPairs.GetHashCode();
      if (HasMaxPairs) hash ^= MaxPairs.GetHashCode();
      if (keys_ != null) hash ^= Keys.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinPairs);
      }
      if (HasMaxPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPairs);
      }
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MapRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinPairs) {
        MinPairs = other.MinPairs;
      }
      if (other.HasMaxPairs) {
        MaxPairs = other.MaxPairs;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          Keys = new global::Buf.Validate.FieldConstraints();
        }
        Keys.MergeFrom(other.Keys);
      }
      if (other.values_ != null) {
        if (values_ == null) {
          Values = new global::Buf.Validate.FieldConstraints();
        }
        Values.MergeFrom(other.Values);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Values);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Buf.Validate.FieldConstraints();
            }
            input.ReadMessage(Values);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// AnyRules describe constraints applied exclusively to the `google.protobuf.Any` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AnyRules : pb::IMessage<AnyRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnyRules> _parser = new pb::MessageParser<AnyRules>(() => new AnyRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AnyRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules(AnyRules other) : this() {
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules Clone() {
      return new AnyRules(this);
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `in` requires the field's `type_url` to be equal to one of the
    ///specified values. If it doesn't match any of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyAny {
    ///   //  The `value` field must have a `type_url` equal to one of the specified values.
    ///   google.protobuf.Any value = 1 [(buf.validate.field).any.in = ["type.googleapis.com/MyType1", "type.googleapis.com/MyType2"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// requires the field's type_url to be not equal to any of the specified values. If it matches any of the specified values, an error message is generated.
    ///
    /// ```proto
    /// message MyAny {
    ///   // The field `value` must not have a `type_url` equal to any of the specified values.
    ///   google.protobuf.Any value = 1 [(buf.validate.field).any.not_in = ["type.googleapis.com/ForbiddenType1", "type.googleapis.com/ForbiddenType2"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AnyRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AnyRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AnyRules other) {
      if (other == null) {
        return;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DurationRules describe the constraints applied exclusively to the `google.protobuf.Duration` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DurationRules : pb::IMessage<DurationRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DurationRules> _parser = new pb::MessageParser<DurationRules>(() => new DurationRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DurationRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules(DurationRules other) : this() {
      const_ = other.const_ != null ? other.const_.Clone() : null;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt.Clone();
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte.Clone();
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt.Clone();
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules Clone() {
      return new DurationRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration const_;
    /// <summary>
    /// `const` dictates that the field must match the specified value of the `google.protobuf.Duration` type exactly.
    /// If the field's value deviates from the specified value, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must equal 5s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.const = "5s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    /// <summary>
    /// `lt` stipulates that the field must be less than the specified value of the `google.protobuf.Duration` type,
    /// exclusive. If the field's value is greater than or equal to the specified
    /// value, an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be less than 5s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = "5s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lt {
      get { return lessThanCase_ == LessThanOneofCase.Lt ? (global::Google.Protobuf.WellKnownTypes.Duration) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lt;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    /// <summary>
    /// `lte` indicates that the field must be less than or equal to the specified
    /// value of the `google.protobuf.Duration` type, inclusive. If the field's value is greater than the specified value,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be less than or equal to 10s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lte = "10s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lte {
      get { return lessThanCase_ == LessThanOneofCase.Lte ? (global::Google.Protobuf.WellKnownTypes.Duration) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lte;
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    /// <summary>
    /// `gt` requires the duration field value to be greater than the specified
    /// value (exclusive). If the value of `gt` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // duration must be greater than 5s [duration.gt]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.gt = { seconds: 5 }];
    ///
    ///   // duration must be greater than 5s and less than 10s [duration.gt_lt]
    ///   google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gt: { seconds: 5 }, lt: { seconds: 10 } }];
    ///
    ///   // duration must be greater than 10s or less than 5s [duration.gt_lt_exclusive]
    ///   google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gt: { seconds: 10 }, lt: { seconds: 5 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt ? (global::Google.Protobuf.WellKnownTypes.Duration) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gt;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    /// <summary>
    /// `gte` requires the duration field value to be greater than or equal to the
    /// specified value (exclusive). If the value of `gte` is larger than a
    /// specified `lt` or `lte`, the range is reversed, and the field value must
    /// be outside the specified range. If the field value doesn't meet the
    /// required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///  // duration must be greater than or equal to 5s [duration.gte]
    ///  google.protobuf.Duration value = 1 [(buf.validate.field).duration.gte = { seconds: 5 }];
    ///
    ///  // duration must be greater than or equal to 5s and less than 10s [duration.gte_lt]
    ///  google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gte: { seconds: 5 }, lt: { seconds: 10 } }];
    ///
    ///  // duration must be greater than or equal to 10s or less than 5s [duration.gte_lt_exclusive]
    ///  google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gte: { seconds: 10 }, lt: { seconds: 5 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte ? (global::Google.Protobuf.WellKnownTypes.Duration) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gte;
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_in_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> in_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// `in` asserts that the field must be equal to one of the specified values of the `google.protobuf.Duration` type.
    /// If the field's value doesn't correspond to any of the specified values,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be in list [1s, 2s, 3s]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.in = ["1s", "2s", "3s"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_notIn_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> notIn_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// `not_in` denotes that the field must not be equal to
    /// any of the specified values of the `google.protobuf.Duration` type.
    /// If the field's value matches any of these values, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must not be in list [1s, 2s, 3s]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.not_in = ["1s", "2s", "3s"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> NotIn {
      get { return notIn_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 3,
      Lte = 4,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 5,
      Gte = 6,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DurationRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DurationRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lt) hash ^= Lt.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lte) hash ^= Lte.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) hash ^= Gt.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DurationRules other) {
      if (other == null) {
        return;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Const.MergeFrom(other.Const);
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          if (Lt == null) {
            Lt = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Lt.MergeFrom(other.Lt);
          break;
        case LessThanOneofCase.Lte:
          if (Lte == null) {
            Lte = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Lte.MergeFrom(other.Lte);
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          if (Gt == null) {
            Gt = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Gt.MergeFrom(other.Gt);
          break;
        case GreaterThanOneofCase.Gte:
          if (Gte == null) {
            Gte = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Gte.MergeFrom(other.Gte);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 58: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 58: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TimestampRules describe the constraints applied exclusively to the `google.protobuf.Timestamp` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TimestampRules : pb::IMessage<TimestampRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampRules> _parser = new pb::MessageParser<TimestampRules>(() => new TimestampRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimestampRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules(TimestampRules other) : this() {
      const_ = other.const_ != null ? other.const_.Clone() : null;
      within_ = other.within_ != null ? other.within_.Clone() : null;
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt.Clone();
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte.Clone();
          break;
        case LessThanOneofCase.LtNow:
          LtNow = other.LtNow;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt.Clone();
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte.Clone();
          break;
        case GreaterThanOneofCase.GtNow:
          GtNow = other.GtNow;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules Clone() {
      return new TimestampRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp const_;
    /// <summary>
    /// `const` dictates that this field, of the `google.protobuf.Timestamp` type, must exactly match the specified value. If the field value doesn't correspond to the specified timestamp, an error message will be generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must equal 2023-05-03T10:00:00Z
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.const = {seconds: 1727998800}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    /// <summary>
    /// requires the duration field value to be less than the specified value (field &lt; value). If the field value doesn't meet the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // duration must be less than 'P3D' [duration.lt]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = { seconds: 259200 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lt {
      get { return lessThanCase_ == LessThanOneofCase.Lt ? (global::Google.Protobuf.WellKnownTypes.Timestamp) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lt;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    /// <summary>
    /// requires the timestamp field value to be less than or equal to the specified value (field &lt;= value). If the field value doesn't meet the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be less than or equal to '2023-05-14T00:00:00Z' [timestamp.lte]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.lte = { seconds: 1678867200 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lte {
      get { return lessThanCase_ == LessThanOneofCase.Lte ? (global::Google.Protobuf.WellKnownTypes.Timestamp) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lte;
      }
    }

    /// <summary>Field number for the "lt_now" field.</summary>
    public const int LtNowFieldNumber = 7;
    /// <summary>
    /// `lt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be less than the current time. `lt_now` can only be used with the `within` rule.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///  // value must be less than now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.lt_now = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LtNow {
      get { return HasLtNow ? (bool) lessThan_ : false; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.LtNow;
      }
    }
    /// <summary>Gets whether the "lt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLtNow {
      get { return lessThanCase_ == LessThanOneofCase.LtNow; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt_now" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLtNow() {
      if (HasLtNow) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    /// <summary>
    /// `gt` requires the timestamp field value to be greater than the specified
    /// value (exclusive). If the value of `gt` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be greater than '2023-01-01T00:00:00Z' [timestamp.gt]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gt = { seconds: 1672444800 }];
    ///
    ///   // timestamp must be greater than '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gt_lt]
    ///   google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gt: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
    ///
    ///   // timestamp must be greater than '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gt_lt_exclusive]
    ///   google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gt: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt ? (global::Google.Protobuf.WellKnownTypes.Timestamp) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gt;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    /// <summary>
    /// `gte` requires the timestamp field value to be greater than or equal to the
    /// specified value (exclusive). If the value of `gte` is larger than a
    /// specified `lt` or `lte`, the range is reversed, and the field value
    /// must be outside the specified range. If the field value doesn't meet
    /// the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' [timestamp.gte]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gte = { seconds: 1672444800 }];
    ///
    ///   // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gte_lt]
    ///   google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gte: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
    ///
    ///   // timestamp must be greater than or equal to '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gte_lt_exclusive]
    ///   google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gte: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte ? (global::Google.Protobuf.WellKnownTypes.Timestamp) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gte;
      }
    }

    /// <summary>Field number for the "gt_now" field.</summary>
    public const int GtNowFieldNumber = 8;
    /// <summary>
    /// `gt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be greater than the current time. `gt_now` can only be used with the `within` rule.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must be greater than now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.gt_now = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GtNow {
      get { return HasGtNow ? (bool) greaterThan_ : false; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.GtNow;
      }
    }
    /// <summary>Gets whether the "gt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGtNow {
      get { return greaterThanCase_ == GreaterThanOneofCase.GtNow; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt_now" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGtNow() {
      if (HasGtNow) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "within" field.</summary>
    public const int WithinFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration within_;
    /// <summary>
    /// `within` specifies that this field, of the `google.protobuf.Timestamp` type, must be within the specified duration of the current time. If the field value isn't within the duration, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must be within 1 hour of now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.within = {seconds: 3600}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Within {
      get { return within_; }
      set {
        within_ = value;
      }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 3,
      Lte = 4,
      LtNow = 7,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 5,
      Gte = 6,
      GtNow = 8,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimestampRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimestampRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (LtNow != other.LtNow) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if (GtNow != other.GtNow) return false;
      if (!object.Equals(Within, other.Within)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lt) hash ^= Lt.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lte) hash ^= Lte.GetHashCode();
      if (HasLtNow) hash ^= LtNow.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) hash ^= Gt.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) hash ^= Gte.GetHashCode();
      if (HasGtNow) hash ^= GtNow.GetHashCode();
      if (within_ != null) hash ^= Within.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (HasLtNow) {
        size += 1 + 1;
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      if (HasGtNow) {
        size += 1 + 1;
      }
      if (within_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Within);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimestampRules other) {
      if (other == null) {
        return;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Const.MergeFrom(other.Const);
      }
      if (other.within_ != null) {
        if (within_ == null) {
          Within = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Within.MergeFrom(other.Within);
      }
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          if (Lt == null) {
            Lt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Lt.MergeFrom(other.Lt);
          break;
        case LessThanOneofCase.Lte:
          if (Lte == null) {
            Lte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Lte.MergeFrom(other.Lte);
          break;
        case LessThanOneofCase.LtNow:
          LtNow = other.LtNow;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          if (Gt == null) {
            Gt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Gt.MergeFrom(other.Gt);
          break;
        case GreaterThanOneofCase.Gte:
          if (Gte == null) {
            Gte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Gte.MergeFrom(other.Gte);
          break;
        case GreaterThanOneofCase.GtNow:
          GtNow = other.GtNow;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
