// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: compassiot/compass/v1/vehicle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Compassiot.Compass.V1 {

  /// <summary>Holder for reflection information generated from compassiot/compass/v1/vehicle.proto</summary>
  public static partial class VehicleReflection {

    #region Descriptor
    /// <summary>File descriptor for compassiot/compass/v1/vehicle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNjb21wYXNzaW90L2NvbXBhc3MvdjEvdmVoaWNsZS5wcm90bxIVY29tcGFz",
            "c2lvdC5jb21wYXNzLnYxGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvGh9jb21wYXNzaW90L2NvbXBhc3MvdjEvZ2VvLnByb3RvIvIHCg1Qb3Np",
            "dGlvbkV2ZW50Eg4KAmlkGA8gASgMUgJpZBIdCgp2ZWhpY2xlX2lkGAEgASgJ",
            "Ugl2ZWhpY2xlSWQSOAoJdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcFIJdGltZXN0YW1wElAKDnRyYW5zcG9ydF90eXBlGAMg",
            "ASgOMiQuY29tcGFzc2lvdC5jb21wYXNzLnYxLlRyYW5zcG9ydFR5cGVIAFIN",
            "dHJhbnNwb3J0VHlwZYgBARJKCgx2ZWhpY2xlX3R5cGUYBCABKA4yIi5jb21w",
            "YXNzaW90LmNvbXBhc3MudjEuVmVoaWNsZVR5cGVIAVILdmVoaWNsZVR5cGWI",
            "AQESOwoIcG9zaXRpb24YBSABKAsyHy5jb21wYXNzaW90LmNvbXBhc3MudjEu",
            "UG9zaXRpb25SCHBvc2l0aW9uEkwKDGFjY2VsZXJhdGlvbhgHIAEoCzIjLmNv",
            "bXBhc3Npb3QuY29tcGFzcy52MS5BY2NlbGVyYXRpb25IAlIMYWNjZWxlcmF0",
            "aW9uiAEBEjQKBGd5cm8YCCABKAsyGy5jb21wYXNzaW90LmNvbXBhc3MudjEu",
            "R3lyb0gDUgRneXJviAEBEhwKB3RyaXBfaWQYCSABKAlIBFIGdHJpcElkiAEB",
            "Eh8KCHByb3ZpZGVyGAogASgJSAVSCHByb3ZpZGVyiAEBEhcKBG1ha2UYCyAB",
            "KAlIBlIEbWFrZYgBARIZCgVtb2RlbBgMIAEoCUgHUgVtb2RlbIgBARIVCgNv",
            "ZG8YDSABKAFICFIDb2RviAEBEikKDmZ1ZWxfb3JfY2hhcmdlGA4gASgBSAlS",
            "DGZ1ZWxPckNoYXJnZYgBARIVCgN0YWcYHiABKAlIClIDdGFniAEBEkgKBmxh",
            "YmVscxgGIAMoCzIwLmNvbXBhc3Npb3QuY29tcGFzcy52MS5Qb3NpdGlvbkV2",
            "ZW50LkxhYmVsc0VudHJ5UgZsYWJlbHMSOwoLaW5nZXN0ZWRfYXQYECABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wUgppbmdlc3RlZEF0GjkKC0xh",
            "YmVsc0VudHJ5EhAKA2tleRgBIAEoCVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2",
            "YWx1ZToCOAFCEQoPX3RyYW5zcG9ydF90eXBlQg8KDV92ZWhpY2xlX3R5cGVC",
            "DwoNX2FjY2VsZXJhdGlvbkIHCgVfZ3lyb0IKCghfdHJpcF9pZEILCglfcHJv",
            "dmlkZXJCBwoFX21ha2VCCAoGX21vZGVsQgYKBF9vZG9CEQoPX2Z1ZWxfb3Jf",
            "Y2hhcmdlQgYKBF90YWcikQEKCFBvc2l0aW9uEjUKBmxhdGxuZxgBIAEoCzId",
            "LmNvbXBhc3Npb3QuY29tcGFzcy52MS5MYXRMbmdSBmxhdGxuZxIZCgVzcGVl",
            "ZBgCIAEoAUgAUgVzcGVlZIgBARIdCgdiZWFyaW5nGAMgASgBSAFSB2JlYXJp",
            "bmeIAQFCCAoGX3NwZWVkQgoKCF9iZWFyaW5nIlkKDEFjY2VsZXJhdGlvbhIR",
            "CgF4GAEgASgBSABSAXiIAQESEQoBeRgCIAEoAUgBUgF5iAEBEhEKAXoYAyAB",
            "KAFIAlIBeogBAUIECgJfeEIECgJfeUIECgJfeiJsCgRHeXJvEhcKBHJvbGwY",
            "ASABKAFIAFIEcm9sbIgBARIZCgVwaXRjaBgCIAEoAUgBUgVwaXRjaIgBARIV",
            "CgN5YXcYAyABKAFIAlIDeWF3iAEBQgcKBV9yb2xsQggKBl9waXRjaEIGCgRf",
            "eWF3KkgKDVRyYW5zcG9ydFR5cGUSHgoaVFJBTlNQT1JUX1RZUEVfVU5TUEVD",
            "SUZJRUQQABILCgdQUklWQVRFEAESCgoGUFVCTElDEAIqiAIKC1ZlaGljbGVU",
            "eXBlEhwKGFZFSElDTEVfVFlQRV9VTlNQRUNJRklFRBAAEgcKA0JVUxABEgcK",
            "A0NBUhACEgcKA1ZBThADEgkKBVRSVUNLEAQSBwoDTENWEAUSBwoDSENWEAYS",
            "BgoCTFYQCBIGCgJIVhAJEgkKBUNSQU5FEAoSCwoHVFJBQ1RPUhALEgsKB1RS",
            "QUlMRVIQDBIKCgZMT0FERVIQDRIOCgpNT1RPUkNZQ0xFEA4SEQoNR0FSQkFH",
            "RV9UUlVDSxAPEgwKCE1JQ1JPQlVTEBASDAoIU05PV1BMT1cQERIQCgxQSUNL",
            "VVBfVFJVQ0sQEhIHCgNTVVYQExIICgNBTEwQ6AcqfQoMTmVhck1pc3NUeXBl",
            "EhcKE05FQVJfTUlTU19UWVBFX05PTkUQABIaChZORUFSX01JU1NfVFlQRV9C",
            "UkFLSU5HEAESGwoXTkVBUl9NSVNTX1RZUEVfU1RFRVJJTkcQAhIbChdORUFS",
            "X01JU1NfVFlQRV9DT01CSU5FRBADQr8BChljb20uY29tcGFzc2lvdC5jb21w",
            "YXNzLnYxQgxWZWhpY2xlUHJvdG9QAVoeY29tcGFzcy9nZW4vY29tcGFzcy92",
            "MTtjb21wYXNzogIDQ0NYqgIVQ29tcGFzc2lvdC5Db21wYXNzLlYxygIVQ29t",
            "cGFzc2lvdFxDb21wYXNzXFYx4gIhQ29tcGFzc2lvdFxDb21wYXNzXFYxXEdQ",
            "Qk1ldGFkYXRh6gIXQ29tcGFzc2lvdDo6Q29tcGFzczo6VjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Compassiot.Compass.V1.GeoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Compassiot.Compass.V1.TransportType), typeof(global::Compassiot.Compass.V1.VehicleType), typeof(global::Compassiot.Compass.V1.NearMissType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Compassiot.Compass.V1.PositionEvent), global::Compassiot.Compass.V1.PositionEvent.Parser, new[]{ "Id", "VehicleId", "Timestamp", "TransportType", "VehicleType", "Position", "Acceleration", "Gyro", "TripId", "Provider", "Make", "Model", "Odo", "FuelOrCharge", "Tag", "Labels", "IngestedAt" }, new[]{ "TransportType", "VehicleType", "Acceleration", "Gyro", "TripId", "Provider", "Make", "Model", "Odo", "FuelOrCharge", "Tag" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Compassiot.Compass.V1.Position), global::Compassiot.Compass.V1.Position.Parser, new[]{ "Latlng", "Speed", "Bearing" }, new[]{ "Speed", "Bearing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Compassiot.Compass.V1.Acceleration), global::Compassiot.Compass.V1.Acceleration.Parser, new[]{ "X", "Y", "Z" }, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Compassiot.Compass.V1.Gyro), global::Compassiot.Compass.V1.Gyro.Parser, new[]{ "Roll", "Pitch", "Yaw" }, new[]{ "Roll", "Pitch", "Yaw" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Specifies the transport type of the vehicle
  /// </summary>
  public enum TransportType {
    [pbr::OriginalName("TRANSPORT_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PRIVATE")] Private = 1,
    [pbr::OriginalName("PUBLIC")] Public = 2,
  }

  /// <summary>
  /// type of vehicle being used
  /// </summary>
  public enum VehicleType {
    [pbr::OriginalName("VEHICLE_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("BUS")] Bus = 1,
    [pbr::OriginalName("CAR")] Car = 2,
    [pbr::OriginalName("VAN")] Van = 3,
    [pbr::OriginalName("TRUCK")] Truck = 4,
    [pbr::OriginalName("LCV")] Lcv = 5,
    [pbr::OriginalName("HCV")] Hcv = 6,
    [pbr::OriginalName("LV")] Lv = 8,
    [pbr::OriginalName("HV")] Hv = 9,
    [pbr::OriginalName("CRANE")] Crane = 10,
    [pbr::OriginalName("TRACTOR")] Tractor = 11,
    [pbr::OriginalName("TRAILER")] Trailer = 12,
    [pbr::OriginalName("LOADER")] Loader = 13,
    [pbr::OriginalName("MOTORCYCLE")] Motorcycle = 14,
    [pbr::OriginalName("GARBAGE_TRUCK")] GarbageTruck = 15,
    [pbr::OriginalName("MICROBUS")] Microbus = 16,
    [pbr::OriginalName("SNOWPLOW")] Snowplow = 17,
    [pbr::OriginalName("PICKUP_TRUCK")] PickupTruck = 18,
    [pbr::OriginalName("SUV")] Suv = 19,
    [pbr::OriginalName("ALL")] All = 1000,
  }

  /// <summary>
  ///*
  /// Type of near miss event
  /// </summary>
  public enum NearMissType {
    /// <summary>
    /// Any type of event
    /// </summary>
    [pbr::OriginalName("NEAR_MISS_TYPE_NONE")] None = 0,
    [pbr::OriginalName("NEAR_MISS_TYPE_BRAKING")] Braking = 1,
    [pbr::OriginalName("NEAR_MISS_TYPE_STEERING")] Steering = 2,
    /// <summary>
    /// combination of STEERING AND BRAKING (different from STEERING OR BRAKING)
    /// </summary>
    [pbr::OriginalName("NEAR_MISS_TYPE_COMBINED")] Combined = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PositionEvent : pb::IMessage<PositionEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PositionEvent> _parser = new pb::MessageParser<PositionEvent>(() => new PositionEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PositionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Compassiot.Compass.V1.VehicleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionEvent(PositionEvent other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      vehicleId_ = other.vehicleId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      transportType_ = other.transportType_;
      vehicleType_ = other.vehicleType_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      gyro_ = other.gyro_ != null ? other.gyro_.Clone() : null;
      tripId_ = other.tripId_;
      provider_ = other.provider_;
      make_ = other.make_;
      model_ = other.model_;
      odo_ = other.odo_;
      fuelOrCharge_ = other.fuelOrCharge_;
      tag_ = other.tag_;
      labels_ = other.labels_.Clone();
      ingestedAt_ = other.ingestedAt_ != null ? other.ingestedAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionEvent Clone() {
      return new PositionEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 15;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 1;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "transport_type" field.</summary>
    public const int TransportTypeFieldNumber = 3;
    private readonly static global::Compassiot.Compass.V1.TransportType TransportTypeDefaultValue = global::Compassiot.Compass.V1.TransportType.Unspecified;

    private global::Compassiot.Compass.V1.TransportType transportType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.TransportType TransportType {
      get { if ((_hasBits0 & 1) != 0) { return transportType_; } else { return TransportTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        transportType_ = value;
      }
    }
    /// <summary>Gets whether the "transport_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransportType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "transport_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransportType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vehicle_type" field.</summary>
    public const int VehicleTypeFieldNumber = 4;
    private readonly static global::Compassiot.Compass.V1.VehicleType VehicleTypeDefaultValue = global::Compassiot.Compass.V1.VehicleType.Unspecified;

    private global::Compassiot.Compass.V1.VehicleType vehicleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.VehicleType VehicleType {
      get { if ((_hasBits0 & 2) != 0) { return vehicleType_; } else { return VehicleTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vehicleType_ = value;
      }
    }
    /// <summary>Gets whether the "vehicle_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVehicleType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vehicle_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVehicleType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Compassiot.Compass.V1.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 7;
    private global::Compassiot.Compass.V1.Acceleration acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.Acceleration Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "gyro" field.</summary>
    public const int GyroFieldNumber = 8;
    private global::Compassiot.Compass.V1.Gyro gyro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.Gyro Gyro {
      get { return gyro_; }
      set {
        gyro_ = value;
      }
    }

    /// <summary>Field number for the "trip_id" field.</summary>
    public const int TripIdFieldNumber = 9;
    private readonly static string TripIdDefaultValue = "";

    private string tripId_;
    /// <summary>
    /// Id linking points of the same trip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TripId {
      get { return tripId_ ?? TripIdDefaultValue; }
      set {
        tripId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trip_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTripId {
      get { return tripId_ != null; }
    }
    /// <summary>Clears the value of the "trip_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTripId() {
      tripId_ = null;
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 10;
    private readonly static string ProviderDefaultValue = "";

    private string provider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Provider {
      get { return provider_ ?? ProviderDefaultValue; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "provider" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProvider {
      get { return provider_ != null; }
    }
    /// <summary>Clears the value of the "provider" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProvider() {
      provider_ = null;
    }

    /// <summary>Field number for the "make" field.</summary>
    public const int MakeFieldNumber = 11;
    private readonly static string MakeDefaultValue = "";

    private string make_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Make {
      get { return make_ ?? MakeDefaultValue; }
      set {
        make_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "make" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMake {
      get { return make_ != null; }
    }
    /// <summary>Clears the value of the "make" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMake() {
      make_ = null;
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 12;
    private readonly static string ModelDefaultValue = "";

    private string model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Model {
      get { return model_ ?? ModelDefaultValue; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModel {
      get { return model_ != null; }
    }
    /// <summary>Clears the value of the "model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModel() {
      model_ = null;
    }

    /// <summary>Field number for the "odo" field.</summary>
    public const int OdoFieldNumber = 13;
    private readonly static double OdoDefaultValue = 0D;

    private double odo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Odo {
      get { if ((_hasBits0 & 4) != 0) { return odo_; } else { return OdoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        odo_ = value;
      }
    }
    /// <summary>Gets whether the "odo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOdo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "odo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOdo() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "fuel_or_charge" field.</summary>
    public const int FuelOrChargeFieldNumber = 14;
    private readonly static double FuelOrChargeDefaultValue = 0D;

    private double fuelOrCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FuelOrCharge {
      get { if ((_hasBits0 & 8) != 0) { return fuelOrCharge_; } else { return FuelOrChargeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fuelOrCharge_ = value;
      }
    }
    /// <summary>Gets whether the "fuel_or_charge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFuelOrCharge {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fuel_or_charge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFuelOrCharge() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 30;
    private readonly static string TagDefaultValue = "";

    private string tag_;
    /// <summary>
    /// extra metadata but simpler to use than labels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag {
      get { return tag_ ?? TagDefaultValue; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return tag_ != null; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      tag_ = null;
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// extra metadata not suppported by our api that may be useful :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "ingested_at" field.</summary>
    public const int IngestedAtFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ingestedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IngestedAt {
      get { return ingestedAt_; }
      set {
        ingestedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PositionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PositionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (VehicleId != other.VehicleId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (TransportType != other.TransportType) return false;
      if (VehicleType != other.VehicleType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(Gyro, other.Gyro)) return false;
      if (TripId != other.TripId) return false;
      if (Provider != other.Provider) return false;
      if (Make != other.Make) return false;
      if (Model != other.Model) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Odo, other.Odo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FuelOrCharge, other.FuelOrCharge)) return false;
      if (Tag != other.Tag) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(IngestedAt, other.IngestedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (HasTransportType) hash ^= TransportType.GetHashCode();
      if (HasVehicleType) hash ^= VehicleType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (gyro_ != null) hash ^= Gyro.GetHashCode();
      if (HasTripId) hash ^= TripId.GetHashCode();
      if (HasProvider) hash ^= Provider.GetHashCode();
      if (HasMake) hash ^= Make.GetHashCode();
      if (HasModel) hash ^= Model.GetHashCode();
      if (HasOdo) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Odo);
      if (HasFuelOrCharge) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FuelOrCharge);
      if (HasTag) hash ^= Tag.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (ingestedAt_ != null) hash ^= IngestedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VehicleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VehicleId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (HasTransportType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TransportType);
      }
      if (HasVehicleType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VehicleType);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (gyro_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Gyro);
      }
      if (HasTripId) {
        output.WriteRawTag(74);
        output.WriteString(TripId);
      }
      if (HasProvider) {
        output.WriteRawTag(82);
        output.WriteString(Provider);
      }
      if (HasMake) {
        output.WriteRawTag(90);
        output.WriteString(Make);
      }
      if (HasModel) {
        output.WriteRawTag(98);
        output.WriteString(Model);
      }
      if (HasOdo) {
        output.WriteRawTag(105);
        output.WriteDouble(Odo);
      }
      if (HasFuelOrCharge) {
        output.WriteRawTag(113);
        output.WriteDouble(FuelOrCharge);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Id);
      }
      if (ingestedAt_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IngestedAt);
      }
      if (HasTag) {
        output.WriteRawTag(242, 1);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VehicleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VehicleId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (HasTransportType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TransportType);
      }
      if (HasVehicleType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VehicleType);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (gyro_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Gyro);
      }
      if (HasTripId) {
        output.WriteRawTag(74);
        output.WriteString(TripId);
      }
      if (HasProvider) {
        output.WriteRawTag(82);
        output.WriteString(Provider);
      }
      if (HasMake) {
        output.WriteRawTag(90);
        output.WriteString(Make);
      }
      if (HasModel) {
        output.WriteRawTag(98);
        output.WriteString(Model);
      }
      if (HasOdo) {
        output.WriteRawTag(105);
        output.WriteDouble(Odo);
      }
      if (HasFuelOrCharge) {
        output.WriteRawTag(113);
        output.WriteDouble(FuelOrCharge);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Id);
      }
      if (ingestedAt_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IngestedAt);
      }
      if (HasTag) {
        output.WriteRawTag(242, 1);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (HasTransportType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransportType);
      }
      if (HasVehicleType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VehicleType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (gyro_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gyro);
      }
      if (HasTripId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TripId);
      }
      if (HasProvider) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (HasMake) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Make);
      }
      if (HasModel) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (HasOdo) {
        size += 1 + 8;
      }
      if (HasFuelOrCharge) {
        size += 1 + 8;
      }
      if (HasTag) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (ingestedAt_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IngestedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PositionEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.HasTransportType) {
        TransportType = other.TransportType;
      }
      if (other.HasVehicleType) {
        VehicleType = other.VehicleType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Compassiot.Compass.V1.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Compassiot.Compass.V1.Acceleration();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.gyro_ != null) {
        if (gyro_ == null) {
          Gyro = new global::Compassiot.Compass.V1.Gyro();
        }
        Gyro.MergeFrom(other.Gyro);
      }
      if (other.HasTripId) {
        TripId = other.TripId;
      }
      if (other.HasProvider) {
        Provider = other.Provider;
      }
      if (other.HasMake) {
        Make = other.Make;
      }
      if (other.HasModel) {
        Model = other.Model;
      }
      if (other.HasOdo) {
        Odo = other.Odo;
      }
      if (other.HasFuelOrCharge) {
        FuelOrCharge = other.FuelOrCharge;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      labels_.MergeFrom(other.labels_);
      if (other.ingestedAt_ != null) {
        if (ingestedAt_ == null) {
          IngestedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IngestedAt.MergeFrom(other.IngestedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VehicleId = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 24: {
            TransportType = (global::Compassiot.Compass.V1.TransportType) input.ReadEnum();
            break;
          }
          case 32: {
            VehicleType = (global::Compassiot.Compass.V1.VehicleType) input.ReadEnum();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Compassiot.Compass.V1.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              Acceleration = new global::Compassiot.Compass.V1.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 66: {
            if (gyro_ == null) {
              Gyro = new global::Compassiot.Compass.V1.Gyro();
            }
            input.ReadMessage(Gyro);
            break;
          }
          case 74: {
            TripId = input.ReadString();
            break;
          }
          case 82: {
            Provider = input.ReadString();
            break;
          }
          case 90: {
            Make = input.ReadString();
            break;
          }
          case 98: {
            Model = input.ReadString();
            break;
          }
          case 105: {
            Odo = input.ReadDouble();
            break;
          }
          case 113: {
            FuelOrCharge = input.ReadDouble();
            break;
          }
          case 122: {
            Id = input.ReadBytes();
            break;
          }
          case 130: {
            if (ingestedAt_ == null) {
              IngestedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IngestedAt);
            break;
          }
          case 242: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VehicleId = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 24: {
            TransportType = (global::Compassiot.Compass.V1.TransportType) input.ReadEnum();
            break;
          }
          case 32: {
            VehicleType = (global::Compassiot.Compass.V1.VehicleType) input.ReadEnum();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Compassiot.Compass.V1.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              Acceleration = new global::Compassiot.Compass.V1.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 66: {
            if (gyro_ == null) {
              Gyro = new global::Compassiot.Compass.V1.Gyro();
            }
            input.ReadMessage(Gyro);
            break;
          }
          case 74: {
            TripId = input.ReadString();
            break;
          }
          case 82: {
            Provider = input.ReadString();
            break;
          }
          case 90: {
            Make = input.ReadString();
            break;
          }
          case 98: {
            Model = input.ReadString();
            break;
          }
          case 105: {
            Odo = input.ReadDouble();
            break;
          }
          case 113: {
            FuelOrCharge = input.ReadDouble();
            break;
          }
          case 122: {
            Id = input.ReadBytes();
            break;
          }
          case 130: {
            if (ingestedAt_ == null) {
              IngestedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IngestedAt);
            break;
          }
          case 242: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Position : pb::IMessage<Position>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Compassiot.Compass.V1.VehicleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position(Position other) : this() {
      _hasBits0 = other._hasBits0;
      latlng_ = other.latlng_ != null ? other.latlng_.Clone() : null;
      speed_ = other.speed_;
      bearing_ = other.bearing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "latlng" field.</summary>
    public const int LatlngFieldNumber = 1;
    private global::Compassiot.Compass.V1.LatLng latlng_;
    /// <summary>
    /// lat and lng of the vehicle position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Compassiot.Compass.V1.LatLng Latlng {
      get { return latlng_; }
      set {
        latlng_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private readonly static double SpeedDefaultValue = 0D;

    private double speed_;
    /// <summary>
    /// speed of vehicle in km/h
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Speed {
      get { if ((_hasBits0 & 1) != 0) { return speed_; } else { return SpeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        speed_ = value;
      }
    }
    /// <summary>Gets whether the "speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bearing" field.</summary>
    public const int BearingFieldNumber = 3;
    private readonly static double BearingDefaultValue = 0D;

    private double bearing_;
    /// <summary>
    /// [optional] bearing of vehicle in degrees [0, 360)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bearing {
      get { if ((_hasBits0 & 2) != 0) { return bearing_; } else { return BearingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bearing_ = value;
      }
    }
    /// <summary>Gets whether the "bearing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBearing {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bearing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBearing() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Latlng, other.Latlng)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bearing, other.Bearing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (latlng_ != null) hash ^= Latlng.GetHashCode();
      if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
      if (HasBearing) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bearing);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (latlng_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Latlng);
      }
      if (HasSpeed) {
        output.WriteRawTag(17);
        output.WriteDouble(Speed);
      }
      if (HasBearing) {
        output.WriteRawTag(25);
        output.WriteDouble(Bearing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (latlng_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Latlng);
      }
      if (HasSpeed) {
        output.WriteRawTag(17);
        output.WriteDouble(Speed);
      }
      if (HasBearing) {
        output.WriteRawTag(25);
        output.WriteDouble(Bearing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (latlng_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latlng);
      }
      if (HasSpeed) {
        size += 1 + 8;
      }
      if (HasBearing) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.latlng_ != null) {
        if (latlng_ == null) {
          Latlng = new global::Compassiot.Compass.V1.LatLng();
        }
        Latlng.MergeFrom(other.Latlng);
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasBearing) {
        Bearing = other.Bearing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (latlng_ == null) {
              Latlng = new global::Compassiot.Compass.V1.LatLng();
            }
            input.ReadMessage(Latlng);
            break;
          }
          case 17: {
            Speed = input.ReadDouble();
            break;
          }
          case 25: {
            Bearing = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (latlng_ == null) {
              Latlng = new global::Compassiot.Compass.V1.LatLng();
            }
            input.ReadMessage(Latlng);
            break;
          }
          case 17: {
            Speed = input.ReadDouble();
            break;
          }
          case 25: {
            Bearing = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Acceleration is measured in gforce
  /// so if the vehicle is accelerating at 9.8m/s^2 (newtons) in the x axis,
  /// the input to this api should be Acceleration { 1, 0, 0 }
  /// if it is decelerating at 1m/s^2, the input to this api should be { -0.102, 0, 0 } (0.102 ~= 1/9.8)
  /// if this is confusing, don't worry to hard about getting it correct, we can apply provider specific unit conversions post ingestion, just be consistent and let us know
  /// Note that the vertical axis in the diagram is the z axis, not the y axis
  /// Also note the + and - signs in the diagram which direction should be positive and negative within each axis
  ///
  /// ![alt text](https://storage.googleapis.com/compass-public-docs/static/acc_gyro.png)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Acceleration : pb::IMessage<Acceleration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Acceleration> _parser = new pb::MessageParser<Acceleration>(() => new Acceleration());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Acceleration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Compassiot.Compass.V1.VehicleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Acceleration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Acceleration(Acceleration other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Acceleration Clone() {
      return new Acceleration(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    /// <summary>
    /// acceleration / braking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    /// <summary>
    /// side to side / turning force
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static double ZDefaultValue = 0D;

    private double z_;
    /// <summary>
    /// vertical up / down force
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Acceleration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Acceleration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasZ) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasZ) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (HasZ) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Acceleration other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Rotational data is measured in degrees per second
  /// A positive value for roll, pitch or yaw is defined in the anti-clockwise direction when facing the positive direction of it's axis
  ///
  /// See acceleration diagram for more details
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Gyro : pb::IMessage<Gyro>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Gyro> _parser = new pb::MessageParser<Gyro>(() => new Gyro());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Gyro> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Compassiot.Compass.V1.VehicleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gyro() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gyro(Gyro other) : this() {
      _hasBits0 = other._hasBits0;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gyro Clone() {
      return new Gyro(this);
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 1;
    private readonly static double RollDefaultValue = 0D;

    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Roll {
      get { if ((_hasBits0 & 1) != 0) { return roll_; } else { return RollDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roll_ = value;
      }
    }
    /// <summary>Gets whether the "roll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoll() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 2;
    private readonly static double PitchDefaultValue = 0D;

    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Pitch {
      get { if ((_hasBits0 & 2) != 0) { return pitch_; } else { return PitchDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitch {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitch() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 3;
    private readonly static double YawDefaultValue = 0D;

    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Yaw {
      get { if ((_hasBits0 & 4) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 4;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYaw {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYaw() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Gyro);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Gyro other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoll) {
        output.WriteRawTag(9);
        output.WriteDouble(Roll);
      }
      if (HasPitch) {
        output.WriteRawTag(17);
        output.WriteDouble(Pitch);
      }
      if (HasYaw) {
        output.WriteRawTag(25);
        output.WriteDouble(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoll) {
        output.WriteRawTag(9);
        output.WriteDouble(Roll);
      }
      if (HasPitch) {
        output.WriteRawTag(17);
        output.WriteDouble(Pitch);
      }
      if (HasYaw) {
        output.WriteRawTag(25);
        output.WriteDouble(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoll) {
        size += 1 + 8;
      }
      if (HasPitch) {
        size += 1 + 8;
      }
      if (HasYaw) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Gyro other) {
      if (other == null) {
        return;
      }
      if (other.HasRoll) {
        Roll = other.Roll;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Roll = input.ReadDouble();
            break;
          }
          case 17: {
            Pitch = input.ReadDouble();
            break;
          }
          case 25: {
            Yaw = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Roll = input.ReadDouble();
            break;
          }
          case 17: {
            Pitch = input.ReadDouble();
            break;
          }
          case 25: {
            Yaw = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
